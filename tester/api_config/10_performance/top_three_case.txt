paddle.Tensor.__abs__(Tensor([10, 1024],"complex64"), )
paddle.Tensor.__abs__(Tensor([10, 1024],"float32"), )
paddle.Tensor.__abs__(Tensor([1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 1, 4096, 4096],"float32"), )
paddle.Tensor.__add__(Tensor([8, 256, 336, 336],"float16"), Tensor([8, 256, 336, 336],"float32"), )
paddle.Tensor.__add__(Tensor([8, 256, 336, 336],"float32"), Tensor([8, 256, 336, 336],"float32"), )
paddle.Tensor.__and__(Tensor([13, 1, 1007, 1007],"bool"), Tensor([13, 1, 1007, 1007],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 2048, 2048],"bool"), Tensor([1, 1, 2048, 2048],"bool"), )
paddle.Tensor.__and__(Tensor([8, 1, 512, 512],"bool"), Tensor([8, 1, 512, 512],"bool"), )
paddle.Tensor.__div__(Tensor([8, 16, 32],"float32"), 2, )
paddle.Tensor.__div__(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__div__(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.__eq__(Tensor([53, 369303],"float32"), Tensor([53, 1],"float32"), )
paddle.Tensor.__eq__(Tensor([55, 349866],"float32"), Tensor([55, 1],"float32"), )
paddle.Tensor.__eq__(Tensor([49, 369303],"float32"), Tensor([49, 1],"float32"), )
paddle.Tensor.__floordiv__(Tensor([10, 1024],"float32"), Tensor([10, 1024],"float16"), )
paddle.Tensor.__floordiv__(Tensor([10, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.Tensor.__floordiv__(Tensor([4, 300],"int64"), 4, )
paddle.Tensor.__ge__(Tensor([3609144],"int32"), 0, )
paddle.Tensor.__ge__(Tensor([3523464],"int32"), 0, )
paddle.Tensor.__ge__(Tensor([3437280],"int32"), 0, )
paddle.Tensor.__gt__(Tensor([1, 400, 65856],"float32"), 0, )
paddle.Tensor.__gt__(Tensor([1, 400, 65856],"float32"), 1e-09, )
paddle.Tensor.__gt__(Tensor([324000, 80],"float32"), 0.0, )
paddle.Tensor.__le__(Tensor([324000, 80],"float32"), 0.0, )
paddle.Tensor.__le__(Tensor([282240, 80],"float32"), 0.0, )
paddle.Tensor.__le__(Tensor([243360, 80],"float32"), 0.0, )
paddle.Tensor.__len__(Tensor([50, 1501, 1501],"float32"), )
paddle.Tensor.__len__(Tensor([100, 376, 376],"float32"), )
paddle.Tensor.__len__(Tensor([100000, 100],"float32"), )
paddle.Tensor.__lshift__(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), )
paddle.Tensor.__lshift__(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.Tensor.__lshift__(Tensor([200, 300],"int32"), Tensor([200, 300],"int32"), )
paddle.Tensor.__lt__(Tensor([256, 3, 64, 128],"float64"), 1, )
paddle.Tensor.__lt__(Tensor([4, 157920, 7],"float32"), 0.1111111111111111, )
paddle.Tensor.__lt__(Tensor([4194304],"float32"), 0.7, )
paddle.Tensor.__matmul__(Tensor([60, 2304, 2304],"float32"), Tensor([60, 2304, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([96, 1024, 1024],"float32"), Tensor([96, 1024, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([176, 3, 392, 392],"float32"), Tensor([176, 3, 392, 32],"float32"), )
paddle.Tensor.__mod__(Tensor([10, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.Tensor.__mod__(Tensor([13, 2, 64],"int64"), 16, )
paddle.Tensor.__mod__(Tensor([26, 64],"int64"), 64, )
paddle.Tensor.__mul__(Tensor([2, 1, 32768, 32768],"float16"), 10000.0, )
paddle.Tensor.__mul__(Tensor([111616, 3584],"float32"), Tensor([111616, 3584],"float32"), )
paddle.Tensor.__mul__(Tensor([108544, 3584],"float32"), Tensor([108544, 3584],"float32"), )
paddle.Tensor.__ne__(Tensor([176, 392, 392],"float32"), 0, )
paddle.Tensor.__ne__(Tensor([160, 392, 392],"float32"), 0, )
paddle.Tensor.__ne__(Tensor([144, 392, 392],"float32"), 0, )
paddle.Tensor.__neg__(Tensor([128, 192612],"float16"), )
paddle.Tensor.__neg__(Tensor([128, 192612],"float32"), )
paddle.Tensor.__neg__(Tensor([4, 81, 94, 311],"float32"), )
paddle.Tensor.__nonzero__(Tensor([1, 1, 1],"int64"), )
paddle.Tensor.__nonzero__(Tensor([1, 1],"bool"), )
paddle.Tensor.__nonzero__(Tensor([1],"bool"), )
paddle.Tensor.__or__(Tensor([1, 400, 65856],"bool"), Tensor([1, 400, 65856],"bool"), )
paddle.Tensor.__or__(Tensor([1, 210, 75600],"bool"), Tensor([1, 210, 75600],"bool"), )
paddle.Tensor.__or__(Tensor([1, 218, 70644],"bool"), Tensor([1, 218, 70644],"bool"), )
paddle.Tensor.__pow__(Tensor([24, 17, 256, 256],"float64"), 2, )
paddle.Tensor.__pow__(Tensor([8, 32, 241, 241],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([64, 3, 256, 256],"float32"), 2, )
paddle.Tensor.__radd__(Tensor([192, 128, 16, 160],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([192, 64, 32, 160],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([192, 240, 16, 80],"float16"), 0, )
paddle.Tensor.__rlshift__(Tensor([200, 300],"int16"), -212, )
paddle.Tensor.__rlshift__(Tensor([200, 300],"int16"), 63, )
paddle.Tensor.__rlshift__(Tensor([200, 300],"int32"), -223, )
paddle.Tensor.__rmatmul__(Tensor([3, 5],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__rmod__(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.__rmul__(Tensor([176, 392, 392],"float32"), -100.0, )
paddle.Tensor.__rmul__(Tensor([324000, 80],"float32"), 0.75, )
paddle.Tensor.__rmul__(Tensor([324000, 80],"float32"), 1.0, )
paddle.Tensor.__ror__(Tensor([2, 3, 5],"int32"), 5, )
paddle.Tensor.__ror__(Tensor([2, 3, 5],"int32"), True, )
paddle.Tensor.__rpow__(Tensor([256],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([192],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([153],"float32"), 10000, )
paddle.Tensor.__rrshift__(Tensor([200, 300],"int16"), -255, )
paddle.Tensor.__rrshift__(Tensor([200, 300],"int16"), 11, )
paddle.Tensor.__rrshift__(Tensor([200, 300],"int32"), 232, )
paddle.Tensor.__rshift__(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), )
paddle.Tensor.__rshift__(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.Tensor.__rshift__(Tensor([200, 300],"int32"), Tensor([200, 300],"int32"), )
paddle.Tensor.__rsub__(Tensor([2, 1, 4096, 4096],"float16"), 1, )
paddle.Tensor.__rsub__(Tensor([4224, 6629],"float32"), 1, )
paddle.Tensor.__rsub__(Tensor([2944, 6629],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([26736, 3029],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([15548, 1358],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([6684, 3029],"float32"), 1.0, )
paddle.Tensor.__rxor__(Tensor([2, 3, 5],"int32"), 5, )
paddle.Tensor.__rxor__(Tensor([2, 3, 5],"int32"), True, )
paddle.Tensor.__sub__(Tensor([2, 1, 32768, 32768],"float16"), 1, )
paddle.Tensor.__sub__(Tensor([26736, 3029, 2],"float32"), Tensor([26736, 3029, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([128, 192, 96, 96],"float32"), Tensor([128, 1, 96, 96],"float32"), )
paddle.Tensor.__truediv__(Tensor([128, 192, 96, 96],"float32"), Tensor([128, 1, 96, 96],"float32"), )
paddle.Tensor.__truediv__(Tensor([128, 128, 96, 96],"float32"), Tensor([128, 1, 96, 96],"float32"), )
paddle.Tensor.__truediv__(Tensor([124, 128, 96, 96],"float32"), Tensor([124, 1, 96, 96],"float32"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.Tensor.abs(Tensor([324000, 80],"float32"), )
paddle.Tensor.abs(Tensor([282240, 80],"float32"), )
paddle.Tensor.abs(Tensor([243360, 80],"float32"), )
paddle.Tensor.add(Tensor([66244],"float32"), Tensor([66244],"float32"), )
paddle.Tensor.add(Tensor([23619],"float32"), Tensor([23619],"float32"), )
paddle.Tensor.add(Tensor([17157],"float32"), Tensor([17157],"float32"), )
paddle.Tensor.all(Tensor([2, 10, 256000],"bool"), )
paddle.Tensor.all(Tensor([1, 1, 2048, 2048],"bool"), )
paddle.Tensor.all(Tensor([2, 10, 32000],"bool"), )
paddle.Tensor.amax(Tensor([3, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.any(Tensor([2, 300, 136, 136],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 192, 192],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 184, 184],"bool"), axis=list[2,3,], )
paddle.Tensor.argmax(Tensor([30, 498, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([30, 477, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([30, 457, 8000],"float32"), axis=2, )
paddle.Tensor.astype(Tensor([100352, 8192],"bfloat16"), "float32", )
paddle.Tensor.astype(Tensor([8192, 100352],"bfloat16"), "float32", )
paddle.Tensor.astype(Tensor([1, 32, 4096, 4096],"float32"), "float32", )
paddle.Tensor.atanh(Tensor([2, 4],"float64"), )
paddle.Tensor.atanh(Tensor([1, 2, 3],"float32"), )
paddle.Tensor.atanh(Tensor([1, 2, 3],"float64"), )
paddle.Tensor.bmm(Tensor([1, 191277, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 179876, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 170476, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.broadcast_to(Tensor([1],"float32"), list[3,2,], )
paddle.Tensor.cast(Tensor([152064, 3584],"float16"), Dtype(float16), )
paddle.Tensor.cast(Tensor([3584, 152064],"float16"), Dtype(float16), )
paddle.Tensor.cast(Tensor([128256, 4096],"float16"), Dtype(float16), )
paddle.Tensor.ceil(Tensor([10, 20, 1],"float32"), )
paddle.Tensor.ceil(Tensor([10, 20],"float32"), )
paddle.Tensor.ceil(Tensor([1, 2],"float32"), )
paddle.Tensor.chunk(Tensor([128, 3136, 192],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([512, 32, 64, 48],"float16"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([512, 32, 64, 48],"float32"), 2, axis=1, )
paddle.Tensor.clip(Tensor([1, 400, 65856, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([2100, 12096, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([4, 525, 12096, 2],"float32"), 0, )
paddle.Tensor.clone(Tensor([6078, 32, 896],"bfloat16"), )
paddle.Tensor.clone(Tensor([6036, 32, 896],"bfloat16"), )
paddle.Tensor.clone(Tensor([6017, 32, 896],"bfloat16"), )
paddle.Tensor.conj(Tensor([2, 20, 2, 3],"complex128"), )
paddle.Tensor.conj(Tensor([2, 20, 2, 3],"complex64"), )
paddle.Tensor.conj(Tensor([10, 20],"float64"), )
paddle.Tensor.cos(Tensor([131072, 128],"float32"), )
paddle.Tensor.cos(Tensor([32768, 128],"float32"), )
paddle.Tensor.cos(Tensor([131072, 16],"float32"), )
paddle.Tensor.cumprod(Tensor([10],"float64"), -1, )
paddle.Tensor.cumprod(Tensor([3],"float32"), -1, )
paddle.Tensor.cumprod(Tensor([3],"float64"), -1, )
paddle.Tensor.cumsum(Tensor([300, 120],"int64"), )
paddle.Tensor.cumsum(Tensor([1, 144, 200],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 144, 200],"float32"), 2, )
paddle.Tensor.detach(Tensor([100352, 8192],"bfloat16"), )
paddle.Tensor.detach(Tensor([8192, 100352],"bfloat16"), )
paddle.Tensor.detach(Tensor([8192, 57344],"bfloat16"), )
paddle.Tensor.diag_embed(Tensor([1, 1, 2],"float32"), )
paddle.Tensor.diagonal(Tensor([3, 3],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([2, 2],"float32"), axis1=-2, axis2=-1, )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=2, )
paddle.Tensor.digamma(Tensor([5, 7, 8, 10],"float64"), )
paddle.Tensor.digamma(Tensor([5, 7, 8],"float64"), )
paddle.Tensor.digamma(Tensor([4, 5],"float64"), )
paddle.Tensor.dim(Tensor([111616, 7168],"bfloat16"), )
paddle.Tensor.dim(Tensor([7168, 111616],"bfloat16"), )
paddle.Tensor.dim(Tensor([95872, 8192],"bfloat16"), )
paddle.Tensor.divide(Tensor([144, 3136, 96],"float32"), Tensor([],"float32"), )
paddle.Tensor.divide(Tensor([128, 3136, 96],"float32"), Tensor([],"float32"), )
paddle.Tensor.divide(Tensor([128, 96, 56, 56],"float32"), Tensor([],"float32"), )
paddle.Tensor.dot(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.dot(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.Tensor.equal(Tensor([128, 128],"int64"), Tensor([128, 128],"int64"), )
paddle.Tensor.equal(Tensor([2, 10],"int64"), 3, )
paddle.Tensor.equal(Tensor([],"complex128"), complex(1.0,1.0), )
paddle.Tensor.equal_all(Tensor([8, 3],"int64"), Tensor([8, 3],"int64"), )
paddle.Tensor.equal_all(Tensor([8],"int64"), Tensor([8],"int64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 5, 4],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 5],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3],"float64"), )
paddle.Tensor.exp(Tensor([1000000, 4],"float64"), )
paddle.Tensor.exp(Tensor([2800],"float32"), )
paddle.Tensor.exp(Tensor([64, 20],"float32"), )
paddle.Tensor.expand(Tensor([1, 1, 2048, 2048],"bool"), list[Tensor([],"int64"),1,Tensor([],"int64"),Tensor([],"int64"),], )
paddle.Tensor.expand(Tensor([1, 1, 1024, 1024],"float32"), list[13,1,1024,1024,], )
paddle.Tensor.expand(Tensor([1, 1, 1007, 1007],"bool"), list[13,1,1007,1007,], )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 477, 401],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 466, 386],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 391, 436],"float32"), )
paddle.Tensor.fill_(Tensor([77, 77],"float32"), value=-math.inf, )
paddle.Tensor.fill_(x=Tensor([10, 16, 16],"float64"), value=41.2, )
paddle.Tensor.fill_(Tensor([2048],"float32"), 0, )
paddle.Tensor.fill_diagonal_(Tensor([128, 128],"float32"), 0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3, 3],"float32"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3, 3],"float64"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 7],"int32"), Tensor([2, 4],"int32"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 7],"int64"), Tensor([2, 4],"int64"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 3, 2],"int32"), Tensor([2, 2, 3],"int32"), offset=0, dim1=1, dim2=2, )
paddle.Tensor.flatten(Tensor([4, 64, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([128, 512, 56, 56],"float16"), 2, )
paddle.Tensor.flatten(Tensor([128, 512, 56, 56],"float32"), 2, )
paddle.Tensor.flip(Tensor([16, 3, 224, 224],"float32"), 0, )
paddle.Tensor.flip(Tensor([3, 400, 300],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 400, 300],"float32"), axis=list[-2,], )
paddle.Tensor.floor(Tensor([1915, 4],"float32"), )
paddle.Tensor.floor(Tensor([1872, 4],"float32"), )
paddle.Tensor.floor(Tensor([1857, 4],"float32"), )
paddle.Tensor.gather(Tensor([4, 4],"float32"), Tensor([4, 1],"int64"), 1, )
paddle.Tensor.gather_nd(Tensor([16, 3, 80, 80, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 80, 80, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 53568, 8],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.Tensor.imag(Tensor([16, 257, 511],"complex64"), )
paddle.Tensor.imag(Tensor([16, 1025, 107],"complex64"), )
paddle.Tensor.imag(Tensor([16, 513, 213],"complex64"), )
paddle.Tensor.index_select(Tensor([4004, 24],"float32"), axis=0, index=Tensor([182],"int64"), )
paddle.Tensor.index_select(Tensor([454, 24],"float32"), axis=0, index=Tensor([130],"int64"), )
paddle.Tensor.index_select(Tensor([454, 24],"float32"), axis=0, index=Tensor([91],"int64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.Tensor.inverse(Tensor([36, 36],"float32"), )
paddle.Tensor.inverse(Tensor([4, 2, 4, 4],"float64"), )
paddle.Tensor.inverse(Tensor([3, 6, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 100, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 40, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 100, 40],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([6],"float64"), y=Tensor([6],"float64"), )
paddle.Tensor.isclose(x=Tensor([2],"float32"), y=Tensor([2],"float32"), )
paddle.Tensor.isinf(Tensor([],"float32"), )
paddle.Tensor.isnan(Tensor([35968],"float32"), )
paddle.Tensor.isnan(Tensor([16384],"float32"), )
paddle.Tensor.isnan(Tensor([2160],"float64"), )
paddle.Tensor.item(Tensor([3, 3],"float32"), 0, )
paddle.Tensor.item(Tensor([2, 1, 1],"int32"), 0, )
paddle.Tensor.item(Tensor([2, 1, 1],"int64"), 0, )
paddle.Tensor.kthvalue(Tensor([2, 200, 10],"float32"), k=200, axis=1, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.less(Tensor([10, 1024],"float32"), Tensor([10, 1024],"float32"), )
paddle.Tensor.lgamma(Tensor([100, 100, 100],"float64"), )
paddle.Tensor.lgamma(Tensor([5, 7, 8, 10],"float64"), )
paddle.Tensor.lgamma(Tensor([5, 7, 8],"float64"), )
paddle.Tensor.log(Tensor([100, 200, 100],"float64"), )
paddle.Tensor.log(Tensor([4800, 101],"float32"), )
paddle.Tensor.log(Tensor([10000, 5, 3],"float64"), )
paddle.Tensor.log10(Tensor([80, 499],"float32"), )
paddle.Tensor.log1p(Tensor([2, 3, 2],"float64"), )
paddle.Tensor.log1p(Tensor([10],"float64"), )
paddle.Tensor.log1p(Tensor([2, 3],"float32"), )
paddle.Tensor.logical_and(Tensor([409600],"bool"), Tensor([409600],"bool"), )
paddle.Tensor.logical_and(Tensor([408921],"bool"), Tensor([408921],"bool"), )
paddle.Tensor.logical_and(Tensor([408910],"bool"), Tensor([408910],"bool"), )
paddle.Tensor.logical_not(Tensor([60000],"bool"), )
paddle.Tensor.logical_not(Tensor([35968],"bool"), )
paddle.Tensor.logical_not(Tensor([16384],"bool"), )
paddle.Tensor.logical_or(Tensor([409600],"bool"), Tensor([409600],"bool"), )
paddle.Tensor.logical_or(Tensor([408921],"bool"), Tensor([408921],"bool"), )
paddle.Tensor.logical_or(Tensor([408910],"bool"), Tensor([408910],"bool"), )
paddle.Tensor.logit(x=Tensor([4, 3, 2, 5],"float64"), eps=0.2, )
paddle.Tensor.lu(Tensor([4, 3, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([3, 3, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 3],"float32"), )
paddle.Tensor.masked_fill(Tensor([1, 38367, 256],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 256],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 8550, 256],"float32"), Tensor([1, 8550, 1],"bool"), 0.0, )
paddle.Tensor.masked_select(Tensor([60000, 50],"float32"), Tensor([60000, 50],"bool"), )
paddle.Tensor.masked_select(Tensor([15000, 50],"float32"), Tensor([15000, 50],"bool"), )
paddle.Tensor.masked_select(Tensor([409600],"float32"), Tensor([409600],"bool"), )
paddle.Tensor.matmul(Tensor([128, 16, 257, 257],"float32"), Tensor([128, 16, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 257, 257],"float32"), Tensor([124, 16, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 197, 197],"float32"), Tensor([128, 12, 197, 64],"float32"), )
paddle.Tensor.max(Tensor([1, 400, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 400, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([324000, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.mean(Tensor([128, 192, 96, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([128, 128, 96, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 128, 96, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.min(Tensor([1, 400, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 525, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([24565, 4, 811],"float32"), axis=1, )
paddle.Tensor.mm(Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.Tensor.mod(Tensor([1],"int64"), Tensor([],"int64"), )
paddle.Tensor.mode(Tensor([3, 2, 3],"float64"), )
paddle.Tensor.mode(Tensor([3, 2, 3],"float64"), axis=1, keepdim=False, )
paddle.Tensor.mode(Tensor([3, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5],"float64"), source=0, destination=2, )
paddle.Tensor.multigammaln(Tensor([7],"float32"), 3, )
paddle.Tensor.multiply(Tensor([160, 3072],"float16"), Tensor([160, 1],"float32"), )
paddle.Tensor.multiply(Tensor([160, 3072],"float32"), Tensor([160, 1],"float32"), )
paddle.Tensor.multiply(Tensor([512, 768],"float16"), Tensor([512, 1],"float32"), )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 3, 3],"float32"), )
paddle.Tensor.nansum(Tensor([3, 3, 3],"float64"), )
paddle.Tensor.neg(Tensor([66244],"float32"), )
paddle.Tensor.neg(Tensor([23619],"float32"), )
paddle.Tensor.neg(Tensor([17157],"float32"), )
paddle.Tensor.nonzero(Tensor([52640, 14],"bool"), )
paddle.Tensor.nonzero(Tensor([52640, 13],"bool"), )
paddle.Tensor.nonzero(Tensor([52640, 12],"bool"), )
paddle.Tensor.norm(Tensor([100352, 8192],"float32"), )
paddle.Tensor.norm(Tensor([8192, 100352],"float32"), )
paddle.Tensor.norm(Tensor([8192, 57344],"float32"), )
paddle.Tensor.not_equal(Tensor([128, 128],"int64"), Tensor([128, 128],"int64"), )
paddle.Tensor.not_equal(Tensor([13, 14],"bool"), Tensor([1],"bool"), )
paddle.Tensor.not_equal(Tensor([13, 14],"int64"), Tensor([1],"int64"), )
paddle.Tensor.outer(x=Tensor([4, 2, 5, 2],"float64"), y=Tensor([2, 3, 4, 4],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2, 3],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3, 4],"float64"), )
paddle.Tensor.pow(Tensor([128, 192, 96, 96],"float32"), 2, )
paddle.Tensor.pow(Tensor([128, 128, 96, 96],"float32"), 2, )
paddle.Tensor.pow(Tensor([124, 128, 96, 96],"float32"), 2, )
paddle.Tensor.prod(Tensor([1, 400, 65856, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([2100, 12096, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([4, 525, 12096, 2],"float32"), -1, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.rad2deg(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 4, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 4],"float64"), )
paddle.Tensor.real(Tensor([8, 32, 481, 481],"complex64"), )
paddle.Tensor.real(Tensor([16, 257, 511],"complex64"), )
paddle.Tensor.real(Tensor([16, 1025, 107],"complex64"), )
paddle.Tensor.reciprocal(Tensor([10, 20, 1],"float32"), )
paddle.Tensor.reciprocal(Tensor([10, 20],"float32"), )
paddle.Tensor.reciprocal(Tensor([10, 12],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.repeat_interleave(Tensor([1, 3, 64, 128],"float64"), 256, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([1, 1, 64, 128],"float64"), 3, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"float64"), repeats=2, )
paddle.Tensor.reshape(Tensor([95872, 8192],"bfloat16"), list[-1,8192,], )
paddle.Tensor.reshape(Tensor([90880, 8192],"bfloat16"), list[-1,8192,], )
paddle.Tensor.reshape(Tensor([89216, 8192],"bfloat16"), list[-1,8192,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.round(Tensor([10, 20, 1],"float32"), )
paddle.Tensor.round(Tensor([10, 20],"float32"), )
paddle.Tensor.round(Tensor([],"float32"), )
paddle.Tensor.rsqrt(Tensor([10, 20, 1],"float32"), )
paddle.Tensor.rsqrt(Tensor([10, 20],"float32"), )
paddle.Tensor.scale(Tensor([100352, 8192],"bfloat16"), 0.006378560586546936, )
paddle.Tensor.scale(Tensor([8192, 100352],"bfloat16"), 0.006378560586546936, )
paddle.Tensor.scale(Tensor([8192, 57344],"bfloat16"), 0.006378560586546936, )
paddle.Tensor.set_(Tensor([20],"bool"), Tensor([15, 3],"bool"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"complex128"), Tensor([15, 3],"complex128"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"complex64"), Tensor([15, 3],"complex64"), list[20,], list[2,], 0, )
paddle.Tensor.sigmoid(Tensor([1, 8550, 4],"float32"), )
paddle.Tensor.sigmoid(Tensor([1, 6380, 4],"float32"), )
paddle.Tensor.sigmoid(Tensor([1, 1100, 4],"float32"), )
paddle.Tensor.sign(Tensor([50000, 5, 5],"float64"), )
paddle.Tensor.sign(Tensor([50000, 2],"float64"), )
paddle.Tensor.sign(Tensor([1124, 32],"float32"), )
paddle.Tensor.signbit(Tensor([12, 20, 2],"float32"), )
paddle.Tensor.signbit(Tensor([12, 20, 2],"float64"), )
paddle.Tensor.signbit(Tensor([12, 20, 2],"int16"), )
paddle.Tensor.sin(Tensor([131072, 128],"float32"), )
paddle.Tensor.sin(Tensor([32768, 128],"float32"), )
paddle.Tensor.sin(Tensor([131072, 16],"float32"), )
paddle.Tensor.slice_scatter(Tensor([8, 6],"float64"), Tensor([8, 3],"float64"), list[1,], list[0,], list[6,], list[2,], )
paddle.Tensor.split(Tensor([50153536],"bfloat16"), list[6144,32,32,50147328,], axis=0, )
paddle.Tensor.split(Tensor([47376448],"bfloat16"), list[6144,32,32,47370240,], axis=0, )
paddle.Tensor.split(Tensor([46534720],"bfloat16"), list[6144,32,32,46528512,], axis=0, )
paddle.Tensor.sqrt(Tensor([64, 80, 48, 48],"float32"), )
paddle.Tensor.sqrt(Tensor([64, 80, 44, 44],"float32"), )
paddle.Tensor.sqrt(Tensor([64, 80, 40, 40],"float32"), )
paddle.Tensor.square(Tensor([8, 128],"float32"), )
paddle.Tensor.square(Tensor([1024],"float32"), )
paddle.Tensor.square(Tensor([2, 128],"float32"), )
paddle.Tensor.squeeze(Tensor([1, 3, 3840, 10240],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([16, 1, 80, 25500],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([200, 1, 37632, 2],"float32"), 1, )
paddle.Tensor.std(Tensor([1024, 1024, 8],"float32"), )
paddle.Tensor.std(Tensor([1024, 1024, 8],"float64"), )
paddle.Tensor.std(Tensor([1444, 1024],"float32"), axis=1, )
paddle.Tensor.subtract(Tensor([66244],"float32"), Tensor([66244],"float32"), )
paddle.Tensor.subtract(Tensor([23619],"float32"), Tensor([23619],"float32"), )
paddle.Tensor.subtract(Tensor([17157],"float32"), Tensor([17157],"float32"), )
paddle.Tensor.sum(Tensor([111616, 3584],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([108544, 3584],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([106496, 3584],"float32"), axis=-1, )
paddle.Tensor.tanh(Tensor([2, 4],"float64"), )
paddle.Tensor.tanh(Tensor([1, 2, 3],"float32"), )
paddle.Tensor.tanh(Tensor([1, 2, 3],"float64"), )
paddle.Tensor.tile(Tensor([38402, 1, 256],"float32"), tuple(1,1,1,), )
paddle.Tensor.tile(Tensor([36858, 1, 256],"float32"), tuple(1,1,1,), )
paddle.Tensor.tile(Tensor([1, 280, 376, 25, 3],"float32"), tuple(Tensor([],"int64"),1,1,1,1,), )
paddle.Tensor.tolist(Tensor([11, 25, 32, 43],"int64"), )
paddle.Tensor.tolist(Tensor([5514],"bool"), )
paddle.Tensor.tolist(Tensor([5392],"bool"), )
paddle.Tensor.topk(Tensor([1024, 8, 48],"float32"), 2, axis=-1, )
paddle.Tensor.topk(Tensor([128, 1000],"float32"), 5, 1, True, True, )
paddle.Tensor.topk(Tensor([1, 1000],"float32"), 5, 1, True, True, )
paddle.Tensor.transpose(Tensor([111616, 7168],"bfloat16"), list[1,0,], )
paddle.Tensor.transpose(Tensor([108544, 7168],"bfloat16"), list[1,0,], )
paddle.Tensor.transpose(Tensor([106496, 7168],"bfloat16"), list[1,0,], )
paddle.Tensor.tril(Tensor([2, 2, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([1, 2, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([2, 2],"float32"), -1, )
paddle.Tensor.trunc(Tensor([28, 28],"float32"), )
paddle.Tensor.trunc(Tensor([2, 8, 8],"float32"), )
paddle.Tensor.trunc(Tensor([8, 8],"float32"), )
paddle.Tensor.unbind(Tensor([3, 960, 196, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 864, 196, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 60, 2304, 64],"float32"), 0, )
paddle.Tensor.unflatten(Tensor([7, 126, 3072],"float32"), -1, tuple(3,Tensor([],"int64"),), )
paddle.Tensor.unique(Tensor([38393],"int64"), )
paddle.Tensor.unique(Tensor([36840],"int64"), )
paddle.Tensor.unique(Tensor([8571],"int64"), )
paddle.Tensor.unsqueeze(Tensor([3, 3840, 10240],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([200, 544, 544],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([200, 544, 544],"float32"), 1, )
paddle.Tensor.var(Tensor([1000000, 4],"float64"), axis=0, )
paddle.Tensor.var(Tensor([1000, 784],"float32"), axis=0, )
paddle.Tensor.var(Tensor([100000, 4],"float64"), axis=0, )
paddle.Tensor.zero_(Tensor([100352, 8192],"float32"), )
paddle.Tensor.zero_(Tensor([8192, 100352],"float32"), )
paddle.Tensor.zero_(Tensor([8192, 57344],"float32"), )
paddle.abs(Tensor([16, 64, 256, 256],"float32"), )
paddle.abs(Tensor([16, 128, 128, 128],"float32"), )
paddle.abs(Tensor([16, 256, 64, 64],"float32"), )
paddle.acos(Tensor([10, 20, 1],"float32"), )
paddle.acos(Tensor([10, 10],"float32"), )
paddle.acos(x=Tensor([3, 3, 3],"float32"), )
paddle.acosh(Tensor([10, 20, 1],"float32"), )
paddle.acosh(Tensor([],"float32"), )
paddle.add(x=Tensor([8, 256, 352, 352],"float32"), y=Tensor([8, 256, 352, 352],"float32"), )
paddle.add(x=Tensor([8, 256, 336, 336],"float32"), y=Tensor([8, 256, 336, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 320, 352],"float32"), y=Tensor([8, 256, 320, 352],"float32"), )
paddle.add_n(list[Tensor([64, 128, 64, 64],"float16"),Tensor([64, 128, 64, 64],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 64, 64],"float32"),Tensor([64, 128, 64, 64],"float32"),], )
paddle.add_n(list[Tensor([64, 256, 32, 32],"float16"),Tensor([64, 256, 32, 32],"float16"),], )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([10, 10],"float32"), )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), )
paddle.all(Tensor([448],"bool"), )
paddle.all(Tensor([5, 6, 10],"bool"), None, False, None, )
paddle.all(Tensor([5, 6, 10],"float64"), None, False, None, )
paddle.allclose(Tensor([30522, 8],"float32"), Tensor([30522, 8],"float32"), )
paddle.allclose(Tensor([1124, 32],"float32"), Tensor([1124, 32],"float32"), )
paddle.allclose(Tensor([13, 32, 64],"float32"), Tensor([13, 32, 64],"float32"), rtol=0.0001, atol=0.0001, )
paddle.amax(Tensor([10, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([10, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([10, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([10, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([10, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([10, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.angle(Tensor([2, 3],"complex128"), )
paddle.angle(Tensor([],"complex64"), )
paddle.any(Tensor([1, 300, 4096],"bool"), )
paddle.any(Tensor([1124, 32],"bool"), )
paddle.any(Tensor([512, 32],"bool"), )
paddle.arange(-100, 100, )
paddle.arange(-14, 14, 1, dtype=Dtype(float32), )
paddle.arange(-19, 20, dtype="float32", name=None, )
paddle.argmax(Tensor([29151, 100, 64],"float32"), axis=1, )
paddle.argmax(Tensor([80239, 20, 64],"float32"), axis=1, )
paddle.argmax(Tensor([29151, 100, 32],"float32"), axis=1, )
paddle.argmin(Tensor([4, 4, 4, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 5, 5],"float64"), axis=0, )
paddle.argsort(Tensor([1500],"float32"), stable=True, )
paddle.argsort(Tensor([1500],"float64"), stable=True, )
paddle.argsort(Tensor([1500],"int32"), stable=True, )
paddle.as_complex(Tensor([1, 8192, 7, 64, 2],"bfloat16"), )
paddle.as_complex(Tensor([32, 15, 8, 8, 32, 2],"float32"), )
paddle.as_complex(Tensor([1, 8192, 1, 64, 2],"bfloat16"), )
paddle.as_real(Tensor([1, 8192, 7, 64],"complex64"), )
paddle.as_real(Tensor([1, 8192, 1, 64],"complex64"), )
paddle.as_real(Tensor([4, 32, 32, 33],"complex64"), )
paddle.as_strided(Tensor([32, 32],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 32],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.asin(Tensor([8, 16, 32],"complex128"), )
paddle.asin(Tensor([8, 16, 32],"complex64"), )
paddle.asin(Tensor([8, 16, 32],"float32"), )
paddle.asinh(Tensor([8, 16, 32],"complex128"), )
paddle.asinh(Tensor([8, 16, 32],"complex64"), )
paddle.asinh(Tensor([8, 16, 32],"float32"), )
paddle.assign(Tensor([822083584],"bfloat16"), Tensor([822083584],"bfloat16"), )
paddle.assign(Tensor([469762048],"bfloat16"), Tensor([469762048],"bfloat16"), )
paddle.assign(Tensor([234881024],"bfloat16"), Tensor([234881024],"bfloat16"), )
paddle.atan(Tensor([8, 16, 32],"complex128"), )
paddle.atan(Tensor([8, 16, 32],"complex64"), )
paddle.atan(Tensor([8, 16, 32],"float32"), )
paddle.atan2(Tensor([111, 222, 333],"float64"), Tensor([222, 333],"float64"), )
paddle.atan2(Tensor([100],"float64"), Tensor([100, 100],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 6, 6],"float64"), y=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.atanh(Tensor([8, 16, 32],"complex128"), )
paddle.atanh(Tensor([8, 16, 32],"complex64"), )
paddle.atanh(Tensor([8, 16, 32],"float32"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.audio.functional.get_window("bartlett", 1, )
paddle.audio.functional.get_window("bartlett", 512, )
paddle.audio.functional.get_window("blackman", 1, )
paddle.bincount(Tensor([16],"int32"), weights=Tensor([16],"float32"), )
paddle.bincount(Tensor([20],"int64"), minlength=Tensor([1],"int32"), )
paddle.bincount(x=Tensor([10],"int32"), weights=Tensor([10],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_invert(Tensor([2, 3, 4, 5],"int32"), )
paddle.bitwise_invert(Tensor([3, 4, 1],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([200, 300],"int64"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bmm(Tensor([26, 1024, 1024],"float32"), Tensor([26, 1024, 12],"float32"), )
paddle.bmm(Tensor([112, 435, 435],"float32"), Tensor([112, 435, 64],"float32"), )
paddle.bmm(Tensor([4, 81, 7332],"float32"), Tensor([4, 7332, 512],"float32"), )
paddle.broadcast_shape(list[0,0,0,], list[0,], )
paddle.broadcast_shape(list[0,1,3,], list[0,1,0,3,], )
paddle.broadcast_shape(list[0,1,3,], list[0,1,1,5,3,], )
paddle.broadcast_tensors(list[Tensor([32, 3, 1024, 768],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([16384, 1024],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([200, 200],"float64"),Tensor([200, 200],"float64"),], )
paddle.broadcast_to(Tensor([64, 1327104],"float32"), tuple(64,1327104,), )
paddle.broadcast_to(Tensor([64, 1327104],"int64"), tuple(64,1327104,), )
paddle.broadcast_to(Tensor([111, 222, 333],"float64"), list[111,222,333,], )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), out_int32=True, )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), right=True, )
paddle.cartesian_prod(list[Tensor([3],"complex128"),Tensor([5],"complex128"),Tensor([5],"complex128"),], )
paddle.cartesian_prod(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([5],"int32"),Tensor([0],"int32"),], )
paddle.cartesian_prod(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([5],"int32"),], )
paddle.cast(Tensor([2, 1, 32768, 32768],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([8, 1024, 50304],"float16"), dtype="float32", )
paddle.cast(Tensor([128256, 3072],"bfloat16"), Dtype(float16), )
paddle.cdist(Tensor([8550, 4],"float32"), Tensor([1, 4],"float32"), p=1, )
paddle.cdist(Tensor([6380, 4],"float32"), Tensor([1, 4],"float32"), p=1, )
paddle.cdist(Tensor([900, 4],"float32"), Tensor([1, 4],"float32"), p=1, )
paddle.ceil(Tensor([32, 32, 128],"float32"), )
paddle.ceil(Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.ceil(Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.chunk(Tensor([16, 128, 25500],"float32"), 2, axis=1, )
paddle.chunk(Tensor([4, 216, 64, 64],"float16"), 3, axis=1, )
paddle.chunk(Tensor([4, 216, 64, 64],"float32"), 3, axis=1, )
paddle.clip(Tensor([3, 3840, 10240],"float32"), 0, 255, )
paddle.clip(Tensor([24, 17, 256, 256],"float64"), min=0, max=2, )
paddle.clip(Tensor([1408, 6144],"float32"), min=-2, max=2, )
paddle.clone(Tensor([43, 256, 56, 56],"float32"), )
paddle.clone(Tensor([145, 12, 112, 112],"float32"), )
paddle.clone(Tensor([22, 64, 112, 112],"float32"), )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.combinations(Tensor([10],"float64"), 5, False, )
paddle.combinations(Tensor([10],"int32"), 1, True, )
paddle.combinations(Tensor([10],"int64"), 0, True, )
paddle.complex(Tensor([20, 64, 1051],"float32"), Tensor([20, 64, 1051],"float32"), )
paddle.complex(Tensor([20, 64, 1001],"float32"), Tensor([20, 64, 1001],"float32"), )
paddle.complex(Tensor([1, 8192, 64],"float32"), Tensor([1, 8192, 64],"float32"), )
paddle.concat(list[Tensor([822083584],"bfloat16"),], )
paddle.concat(list[Tensor([469762048],"bfloat16"),], )
paddle.concat(list[Tensor([512, 32, 112, 112],"float16"),Tensor([512, 32, 112, 112],"float16"),], axis=1, )
paddle.conj(Tensor([2, 20, 2, 3],"complex128"), )
paddle.conj(Tensor([2, 20, 2, 3],"complex64"), )
paddle.conj(Tensor([2, 20, 2, 3],"float32"), )
paddle.copysign(Tensor([8, 17, 5, 6, 7],"float16"), Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([12, 20, 2],"float32"), Tensor([12, 20, 2],"float32"), )
paddle.copysign(Tensor([12, 20, 2],"float64"), Tensor([12, 20, 2],"float64"), )
paddle.cos(Tensor([5000, 256],"float32"), )
paddle.cos(Tensor([32768, 32],"float32"), )
paddle.cos(Tensor([8192, 128],"float32"), )
paddle.cosh(Tensor([8, 32, 241, 241],"float32"), )
paddle.cosh(Tensor([10, 20, 1],"float32"), )
paddle.cosh(x=Tensor([3, 3, 3],"float32"), )
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.crop(x=Tensor([2, 3, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([3, 3],"float32"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=0, )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=1, )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=2, )
paddle.cummax(Tensor([100, 100],"float32"), )
paddle.cummax(Tensor([100, 100],"float32"), axis=-1, )
paddle.cummax(Tensor([100, 100],"float32"), axis=-2, )
paddle.cummin(Tensor([100, 100],"float32"), )
paddle.cummin(Tensor([100, 100],"float32"), axis=-1, )
paddle.cummin(Tensor([100, 100],"float32"), axis=-2, )
paddle.cumprod(Tensor([2, 3, 10, 10],"float64"), 1, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=1, )
paddle.cumsum(Tensor([1038765],"float32"), axis=0, )
paddle.cumsum(Tensor([1037889],"float32"), axis=0, )
paddle.cumsum(Tensor([1034011],"float32"), axis=0, )
paddle.deg2rad(Tensor([8, 16, 32],"float32"), )
paddle.deg2rad(Tensor([6],"float32"), )
paddle.deg2rad(Tensor([1],"int64"), )
paddle.diag(Tensor([2000, 2000],"float32"), )
paddle.diag(Tensor([2000, 2000],"float32"), offset=-1, )
paddle.diag(Tensor([2000, 2000],"float32"), offset=1, )
paddle.diag_embed(Tensor([2, 3, 12],"float64"), )
paddle.diag_embed(Tensor([2, 3, 8],"float64"), )
paddle.diag_embed(Tensor([2, 3, 6],"float64"), )
paddle.diagflat(x=Tensor([3, 2, 2, 1, 2, 4, 2, 2],"float64"), offset=2, )
paddle.diagflat(Tensor([10, 10],"float64"), )
paddle.diagflat(Tensor([10, 10],"float64"), offset=1, )
paddle.diagonal(x=Tensor([6, 6, 6, 6],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal_scatter(Tensor([10, 10],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"int16"), Tensor([10],"int16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"int32"), Tensor([10],"int32"), offset=0, axis1=0, axis2=1, )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=-2, )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=2, )
paddle.digamma(Tensor([8, 3, 32, 32],"float32"), )
paddle.digamma(Tensor([8, 3, 32, 32],"float64"), )
paddle.digamma(x=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 8, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 4, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([4, 10],"float64"), )
paddle.divide(Tensor([128, 93431],"float32"), Tensor([1, 93431],"float32"), )
paddle.divide(x=Tensor([187679, 3],"float32"), y=Tensor([3],"float32"), )
paddle.divide(Tensor([512, 995],"float32"), Tensor([1, 995],"float32"), )
paddle.dot(x=Tensor([6],"float32"), y=Tensor([6],"float32"), )
paddle.dot(x=Tensor([6],"float64"), y=Tensor([6],"float64"), )
paddle.dot(x=Tensor([6],"int32"), y=Tensor([6],"int32"), )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list[-1,], )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list[2,4,], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 498, 498],"float32"), Tensor([30, 8, 498, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 477, 477],"float32"), Tensor([30, 8, 477, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 457, 457],"float32"), Tensor([30, 8, 457, 64],"float32"), )
paddle.equal(Tensor([4148, 30],"int64"), Tensor([4148, 30],"int64"), )
paddle.equal(Tensor([512, 30],"int64"), 0, )
paddle.equal(Tensor([416, 30],"int64"), 0, )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([16, 16],"float32"), Tensor([16, 16],"float32"), )
paddle.equal_all(Tensor([128],"float32"), Tensor([128],"float32"), )
paddle.erf(Tensor([4, 2, 3, 5, 4],"float64"), )
paddle.erf(Tensor([11, 17],"float64"), )
paddle.erf(Tensor([4, 2, 3, 5],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3, 5, 4],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3, 5],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3],"float64"), )
paddle.exp(Tensor([13, 64, 1007, 16],"float32"), )
paddle.exp(Tensor([8, 1, 960, 960],"float32"), )
paddle.exp(Tensor([16, 1, 640, 640],"float32"), )
paddle.expand(Tensor([2, 2, 1, 8, 128, 96],"float16"), list[2,2,1,8,128,96,], )
paddle.expand(Tensor([2, 2, 1, 8, 128, 96],"float16"), list[2,2,2,8,128,96,], )
paddle.expand(Tensor([16, 32, 128],"float32"), list[8,16,32,128,], )
paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 28, 28],"float16"), )
paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 28, 28],"float32"), )
paddle.expand_as(Tensor([511, 80, 1, 1],"float32"), Tensor([511, 80, 28, 28],"float32"), )
paddle.expm1(Tensor([8, 16, 32],"complex128"), )
paddle.expm1(Tensor([8, 16, 32],"complex64"), )
paddle.expm1(Tensor([8, 16, 32],"float16"), )
paddle.eye(Tensor([],"int64"), Tensor([],"int64"), )
paddle.eye(num_rows=Tensor([1],"float64"), num_columns=Tensor([1],"float64"), dtype="float32", )
paddle.eye(1, dtype="float32", )
paddle.fft.fft(x=Tensor([7],"complex128"), )
paddle.fft.fft(x=Tensor([7],"complex128"), axis=0, )
paddle.fft.fft(x=Tensor([7],"complex128"), n=1, )
paddle.fft.fft2(x=Tensor([3, 2, 4, 2],"complex128"), )
paddle.fft.fft2(x=Tensor([3, 3, 2, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.fft2(x=Tensor([2, 2, 4],"complex128"), )
paddle.fft.fftfreq(n=10, d=0.1, )
paddle.fft.fftfreq(n=14, d=0.03703703731298447, )
paddle.fft.fftfreq(n=39, d=0.5, )
paddle.fft.fftn(Tensor([8, 32, 481, 481],"float32"), axes=list[2,3,], )
paddle.fft.fftn(x=Tensor([50, 8, 39, 14, 14],"float32"), axes=list[-3,-2,-1,], )
paddle.fft.fftn(Tensor([39, 7, 32],"float32"), )
paddle.fft.fftshift(x=Tensor([16, 96, 20, 11],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 64, 19, 10],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 128, 10, 6],"complex64"), axes=list[-2,], )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), n=2, )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), n=2, axis=1, )
paddle.fft.hfft2(x=Tensor([3, 3, 3, 3],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 4],"complex128"), )
paddle.fft.hfftn(Tensor([3, 3, 3, 3],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.ifft(x=Tensor([7],"complex128"), )
paddle.fft.ifft(x=Tensor([7],"complex128"), axis=0, )
paddle.fft.ifft(x=Tensor([7],"complex128"), n=1, )
paddle.fft.ifft2(x=Tensor([3, 2, 4, 2],"complex128"), )
paddle.fft.ifft2(x=Tensor([3, 3, 2, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([2, 2, 4],"complex128"), )
paddle.fft.ifftn(Tensor([8, 32, 481, 481],"complex64"), axes=list[2,3,], )
paddle.fft.ifftn(x=Tensor([50, 8, 39, 14, 14],"complex64"), s=tuple(39,14,14,), )
paddle.fft.ifftn(x=Tensor([4, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=tuple(0,3,), )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), n=2, )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), n=2, axis=1, )
paddle.fft.ihfft2(x=Tensor([4, 3, 3, 3],"float64"), )
paddle.fft.ihfft2(x=Tensor([3, 4, 5],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 3, 3],"float64"), s=tuple(1,2,), )
paddle.fft.ihfftn(x=Tensor([4, 3, 5, 2],"float64"), )
paddle.fft.ihfftn(Tensor([4, 3, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([3, 4, 5],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfft(Tensor([20, 64, 1051],"complex64"), n=2101, )
paddle.fft.irfft(Tensor([20, 64, 1001],"complex64"), n=2001, )
paddle.fft.irfft(Tensor([4, 32, 32, 16],"complex64"), n=64, axis=-1, norm="forward", )
paddle.fft.irfft2(Tensor([32, 32, 250, 126],"complex64"), s=tuple(250,250,), )
paddle.fft.irfft2(Tensor([8, 32, 250, 126],"complex64"), s=tuple(250,250,), )
paddle.fft.irfft2(Tensor([32, 15, 8, 256],"complex64"), s=tuple(15,15,), axes=tuple(1,2,), norm="ortho", )
paddle.fft.irfftn(Tensor([32, 32, 250, 126],"complex64"), tuple(250,250,), tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([8, 32, 250, 126],"complex64"), tuple(250,250,), tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([32, 15, 8, 256],"complex64"), tuple(15,15,), tuple(1,2,), "ortho", None, )
paddle.fft.rfft(Tensor([20, 64, 2101],"float32"), )
paddle.fft.rfft(Tensor([20, 64, 2001],"float32"), )
paddle.fft.rfft(Tensor([4, 32, 32, 64],"float32"), axis=-1, norm="forward", )
paddle.fft.rfft2(Tensor([32, 32, 250, 250],"float32"), )
paddle.fft.rfft2(Tensor([8, 32, 250, 250],"float32"), )
paddle.fft.rfft2(x=Tensor([32, 15, 15, 256],"float32"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.rfftfreq(n=5, d=0.3, )
paddle.fft.rfftfreq(n=8, d=0.3, )
paddle.fft.rfftfreq(n=8, d=1, )
paddle.fft.rfftn(Tensor([32, 32, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([8, 32, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([32, 15, 15, 256],"float32"), None, tuple(1,2,), "ortho", None, )
paddle.flatten(Tensor([4096, 256, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([512, 50, 7, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([416, 50, 7, 256],"float32"), start_axis=2, )
paddle.flip(Tensor([64, 3, 112, 112],"float32"), axis=-1, )
paddle.flip(Tensor([52, 3, 112, 112],"float32"), axis=-1, )
paddle.flip(Tensor([3, 8, 224, 224],"float32"), axis=list[3,], )
paddle.floor(Tensor([4, 157920],"float32"), )
paddle.floor(Tensor([100000, 2, 3],"float32"), )
paddle.floor(x=Tensor([100, 4, 38, 38],"float32"), )
paddle.floor_divide(Tensor([10, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.floor_divide(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.floor_divide(Tensor([128],"int64"), Tensor([],"int64"), )
paddle.floor_mod(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.floor_mod(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.floor_mod(Tensor([],"float32"), Tensor([],"float32"), )
paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([15],"float32"), )
paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([15],"float32"), )
paddle.frac(Tensor([10, 20, 1],"float32"), )
paddle.frac(Tensor([2, 3],"float32"), )
paddle.frac(Tensor([2, 3],"float64"), )
paddle.full(shape=Tensor([5],"int64"), fill_value=-2, )
paddle.full(list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], 0.5, )
paddle.full(shape=Tensor([2],"int32"), fill_value=Tensor([1],"float32"), )
paddle.full_like(Tensor([1, 1, 2048, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([6, 256000],"float32"), 0.0, )
paddle.full_like(Tensor([1, 300, 4096],"float32"), 1, )
paddle.gammainc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammainc(Tensor([3, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([3, 40],"float32"), Tensor([3, 40],"float32"), )
paddle.gather(Tensor([2048, 2048, 7, 7],"float32"), Tensor([512, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 7, 7],"float32"), Tensor([496, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 7, 7],"float32"), Tensor([482, 1],"int64"), )
paddle.gather_nd(Tensor([20, 41344, 128],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([1, 8192, 7168],"bfloat16"), Tensor([8162, 2],"int64"), )
paddle.gather_nd(Tensor([1, 8192, 7168],"bfloat16"), Tensor([7780, 2],"int64"), )
paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.gcd(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.geometric.segment_max(Tensor([40, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_sum(Tensor([40, 20],"float32"), Tensor([40],"int32"), )
paddle.geometric.segment_sum(Tensor([30, 15],"float16"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([30, 15],"float32"), Tensor([30],"int64"), )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.greater_equal(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), )
paddle.greater_equal(Tensor([8, 1024, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.greater_than(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.heaviside(Tensor([300, 2048],"float32"), Tensor([300, 2048],"float32"), )
paddle.heaviside(Tensor([300, 2048],"float32"), Tensor([2048],"float32"), )
paddle.heaviside(Tensor([300, 2048],"float32"), Tensor([1],"float32"), )
paddle.histogram(input=Tensor([4, 4],"int64"), )
paddle.histogram_bin_edges(Tensor([5, 20],"float32"), bins=10, min=0, max=1, )
paddle.histogram_bin_edges(Tensor([5, 20],"float32"), bins=10, min=0.2, max=0.9, )
paddle.histogram_bin_edges(Tensor([5, 20],"float32"), bins=10, min=1, max=1, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=5, weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list[-1,], )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list[2,4,], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.hypot(Tensor([10, 20],"float32"), Tensor([10, 20],"float32"), )
paddle.hypot(Tensor([10, 10],"float32"), Tensor([10, 1],"float32"), )
paddle.hypot(Tensor([6],"float32"), Tensor([1],"float32"), )
paddle.i0(Tensor([513],"float64"), )
paddle.i0(Tensor([10, 20, 1],"float32"), )
paddle.i0(Tensor([9],"float32"), )
paddle.i0e(Tensor([9],"float32"), )
paddle.i0e(Tensor([9],"float64"), )
paddle.i0e(Tensor([6],"float64"), )
paddle.i1(Tensor([9],"float32"), )
paddle.i1(Tensor([9],"float64"), )
paddle.i1(Tensor([6],"float64"), )
paddle.i1e(Tensor([9],"float32"), )
paddle.i1e(Tensor([9],"float64"), )
paddle.i1e(Tensor([6],"float64"), )
paddle.imag(Tensor([10, 10, 10, 20],"complex128"), )
paddle.imag(Tensor([2, 20, 2, 3],"complex128"), )
paddle.imag(Tensor([2, 20, 2, 3],"complex64"), )
paddle.increment(Tensor([1],"float32"), value=2.0, )
paddle.increment(Tensor([1],"int64"), )
paddle.increment(Tensor([],"float32"), 1.0, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([40, 50],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([50, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([40, 50],"float32"), None, True, True, )
paddle.incubate.nn.functional.swiglu(Tensor([111616, 7168],"bfloat16"), )
paddle.incubate.nn.functional.swiglu(Tensor([108544, 7168],"bfloat16"), )
paddle.incubate.nn.functional.swiglu(Tensor([106496, 7168],"bfloat16"), )
paddle.incubate.segment_max(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_mean(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_min(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_sum(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.index_add(Tensor([100, 100, 25],"float32"), Tensor([20],"int32"), 2, Tensor([100, 100, 20],"float32"), )
paddle.index_add(Tensor([100, 100, 5],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5],"float32"), )
paddle.index_add(Tensor([100, 5],"float32"), Tensor([20],"int32"), 0, Tensor([20, 5],"float32"), )
paddle.index_fill(Tensor([10, 15, 10],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([10, 15, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 15, 10],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_sample(Tensor([1865664, 100],"float32"), Tensor([1865664, 1],"int64"), )
paddle.index_sample(Tensor([5135296, 20],"float32"), Tensor([5135296, 1],"int64"), )
paddle.index_sample(Tensor([932832, 100],"float32"), Tensor([932832, 1],"int64"), )
paddle.index_select(Tensor([64, 3060, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([16, 12096, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([16, 11109, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.inner(Tensor([20, 50],"complex128"), Tensor([50],"complex128"), )
paddle.inner(Tensor([20, 50],"float64"), Tensor([50],"float64"), )
paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.is_complex(Tensor([100352, 8192],"float32"), )
paddle.is_complex(Tensor([8192, 100352],"float32"), )
paddle.is_complex(Tensor([8192, 57344],"float32"), )
paddle.is_empty(x=Tensor([4, 32, 32],"float32"), )
paddle.is_empty(Tensor([3, 5],"float32"), )
paddle.is_empty(Tensor([2, 3],"float32"), )
paddle.isclose(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.isclose(x=Tensor([6],"float64"), y=Tensor([6],"float64"), )
paddle.isfinite(Tensor([4, 280, 376, 25, 3],"float32"), )
paddle.isfinite(Tensor([4, 94, 311],"float32"), )
paddle.isfinite(Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 256],"float32"), False, False, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 64],"float64"), Tensor([4, 256],"float64"), False, False, )
paddle.isinf(Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.isinf(Tensor([14, 64, 16],"float32"), )
paddle.isinf(Tensor([14, 7, 99],"float32"), )
paddle.isnan(Tensor([4, 64, 320, 320],"float16"), )
paddle.isnan(Tensor([4, 64, 320, 320],"float32"), )
paddle.isnan(Tensor([4864, 4864],"float32"), )
paddle.isneginf(Tensor([11, 17, 10],"int16"), )
paddle.isneginf(Tensor([11, 17, 10],"int32"), )
paddle.isneginf(Tensor([11, 17],"float32"), )
paddle.isposinf(Tensor([11, 17, 10],"int16"), )
paddle.isposinf(Tensor([11, 17, 10],"int32"), )
paddle.isposinf(Tensor([11, 17],"float32"), )
paddle.isreal(Tensor([64, 32],"bfloat16"), )
paddle.isreal(Tensor([64, 32],"bool"), )
paddle.isreal(Tensor([64, 32],"float16"), )
paddle.kron(Tensor([64, 64],"float32"), Tensor([76, 76],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), )
paddle.kthvalue(Tensor([30, 200, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 200, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 200, 40],"float32"), k=2, )
paddle.lcm(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.lcm(Tensor([6],"int32"), Tensor([1],"int32"), )
paddle.lcm(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.ldexp(Tensor([247],"float64"), Tensor([247],"int32"), )
paddle.ldexp(Tensor([210],"int32"), Tensor([210],"int32"), )
paddle.ldexp(Tensor([209],"int64"), Tensor([209],"int32"), )
paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 28],"float32"), 0.36, )
paddle.less(Tensor([10, 1024],"float32"), Tensor([10, 1024],"float32"), )
paddle.less(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.less_equal(Tensor([513],"float64"), Tensor([],"float64"), )
paddle.less_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.less_than(Tensor([8, 1, 128, 128],"float32"), Tensor([8, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([1, 128, 256],"float32"), Tensor([1, 128, 256],"float32"), )
paddle.less_than(Tensor([1, 128, 256],"int64"), Tensor([1, 128, 256],"int64"), )
paddle.lgamma(Tensor([100, 100],"float64"), )
paddle.lgamma(Tensor([10, 10, 10, 2],"float64"), )
paddle.lgamma(Tensor([1948, 1],"float32"), )
paddle.linalg.cholesky(Tensor([3, 3],"float64"), )
paddle.linalg.cholesky(Tensor([2, 2],"float32"), )
paddle.linalg.cholesky(Tensor([2, 2],"float64"), )
paddle.linalg.cond(x=Tensor([6, 2, 4, 3, 4],"float64"), )
paddle.linalg.cond(x=Tensor([4, 2, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.corrcoef(Tensor([4, 5],"float32"), )
paddle.linalg.corrcoef(Tensor([4, 5],"float32"), rowvar=False, )
paddle.linalg.corrcoef(Tensor([4, 5],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.det(Tensor([2, 1, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([3, 3, 5, 5],"complex128"), )
paddle.linalg.det(Tensor([3, 3, 5, 5],"float32"), )
paddle.linalg.inv(x=Tensor([5, 3, 4, 4],"float64"), )
paddle.linalg.inv(Tensor([5, 5],"float64"), )
paddle.linalg.inv(x=Tensor([4, 4],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 5, 5],"float64"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float32"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_rank(Tensor([2, 0, 6, 6],"float32"), )
paddle.linalg.matrix_rank(Tensor([2, 0, 6, 6],"float32"), atol=0.2, rtol=0.2, )
paddle.linalg.matrix_transpose(Tensor([2, 3, 4],"float32"), )
paddle.linalg.multi_dot(list[Tensor([4, 4],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.norm(Tensor([727173],"float32"), p=2, )
paddle.linalg.norm(Tensor([50, 50, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([8550, 1, 4],"float32"), p=1.0, axis=-1, )
paddle.linalg.pinv(Tensor([2, 200, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(x=Tensor([2, 4, 40],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 100, 12],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 100, 8],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 100, 6],"float64"), )
paddle.linalg.slogdet(Tensor([3, 3, 5, 5],"complex64"), )
paddle.linalg.slogdet(Tensor([3, 3, 5, 5],"float32"), )
paddle.linalg.slogdet(x=Tensor([14, 14],"float32"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14],"float64"), )
paddle.linalg.svdvals(Tensor([40, 40],"float64"), )
paddle.linalg.svdvals(Tensor([10, 3, 6],"float64"), )
paddle.linalg.svdvals(Tensor([10, 12],"float32"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 1],"float64"), )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.log(Tensor([64, 80, 6625],"float32"), )
paddle.log(Tensor([64, 40, 6625],"float32"), )
paddle.log(Tensor([64, 25, 6626],"float32"), )
paddle.log10(Tensor([10, 20, 1],"float32"), )
paddle.log10(x=Tensor([2, 3, 2, 2],"float64"), )
paddle.log10(x=Tensor([2, 2],"float64"), )
paddle.log1p(Tensor([4, 157920, 3],"float32"), )
paddle.log1p(Tensor([50000, 5, 5],"float64"), )
paddle.log1p(Tensor([10, 200, 300],"float32"), )
paddle.log2(Tensor([10, 20, 1],"float32"), )
paddle.log2(Tensor([10, 12],"float32"), )
paddle.log2(Tensor([10, 12],"float64"), )
paddle.logaddexp(Tensor([10, 200, 300],"float32"), Tensor([10, 200, 300],"float32"), )
paddle.logaddexp(Tensor([10, 200, 300],"int32"), Tensor([10, 200, 300],"int32"), )
paddle.logaddexp(Tensor([10, 200, 300],"int64"), Tensor([10, 200, 300],"int64"), )
paddle.logcumsumexp(Tensor([10, 10, 10],"float32"), )
paddle.logcumsumexp(Tensor([10, 10, 10],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([10, 10, 10],"float32"), axis=0, )
paddle.logical_and(Tensor([53, 369303],"bool"), Tensor([53, 369303],"bool"), )
paddle.logical_and(Tensor([55, 349866],"bool"), Tensor([55, 349866],"bool"), )
paddle.logical_and(Tensor([49, 369303],"bool"), Tensor([49, 369303],"bool"), )
paddle.logical_not(Tensor([225792, 80],"bool"), )
paddle.logical_not(Tensor([220416, 80],"bool"), )
paddle.logical_not(Tensor([215040, 80],"bool"), )
paddle.logical_or(Tensor([640, 640],"bool"), Tensor([640, 640],"bool"), )
paddle.logical_or(Tensor([34000],"bool"), Tensor([34000],"bool"), )
paddle.logical_or(Tensor([27540],"bool"), Tensor([27540],"bool"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logit(Tensor([10, 20, 1],"float32"), 0.001, )
paddle.logit(Tensor([120],"float32"), 1e-08, )
paddle.logit(x=Tensor([4, 3, 2, 5],"float64"), eps=0.2, )
paddle.logspace(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"int32"), Tensor([1],"float32"), dtype="float32", )
paddle.logspace(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"int32"), Tensor([],"float32"), )
paddle.logspace(0, 10, 200, 2, dtype="int32", )
paddle.logsumexp(Tensor([1024, 384],"float32"), axis=1, )
paddle.logsumexp(Tensor([30, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.masked_fill(Tensor([30, 60, 30],"int32"), Tensor([30, 60, 30],"bool"), 0, )
paddle.masked_fill(Tensor([20, 60, 20],"int32"), Tensor([20, 60, 20],"bool"), 0, )
paddle.masked_fill(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([1],"float32"), )
paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_select(Tensor([16, 12096, 68],"float32"), Tensor([16, 12096, 68],"bool"), )
paddle.masked_select(Tensor([16, 11109, 68],"float32"), Tensor([16, 11109, 68],"bool"), )
paddle.masked_select(Tensor([16, 10164, 68],"float32"), Tensor([16, 10164, 68],"bool"), )
paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 32, 4096, 128],"float32"), )
paddle.matmul(Tensor([10, 8, 499, 3600],"float32"), Tensor([10, 8, 3600, 64],"float32"), )
paddle.matmul(Tensor([512, 4, 256, 256],"float32"), Tensor([512, 4, 256, 36],"float32"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"float16"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"float32"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"float64"), )
paddle.max(Tensor([512, 50, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([416, 50, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([8, 1024, 1024],"float32"), axis=-1, keepdim=True, )
paddle.maximum(Tensor([16121, 811],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([14877, 420],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([11585, 418],"float32"), Tensor([1],"float32"), )
paddle.mean(Tensor([8162, 8, 1280],"bfloat16"), axis=1, )
paddle.mean(Tensor([7710, 8, 1280],"bfloat16"), axis=1, )
paddle.mean(Tensor([7573, 8, 1280],"bfloat16"), axis=1, )
paddle.median(Tensor([384],"float32"), )
paddle.median(Tensor([384],"int64"), )
paddle.median(Tensor([2, 100],"float32"), axis=1, mode="min", )
paddle.meshgrid(Tensor([4098],"float32"), Tensor([4098],"float32"), )
paddle.meshgrid(list[Tensor([280],"float32"),Tensor([376],"float32"),Tensor([25],"float32"),], )
paddle.meshgrid(Tensor([336],"float32"), Tensor([336],"float32"), )
paddle.min(Tensor([64, 1, 28, 28],"float32"), )
paddle.min(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.minimum(Tensor([16, 1, 2],"float32"), Tensor([451143, 2],"float32"), )
paddle.minimum(Tensor([13, 1, 2],"float32"), Tensor([451143, 2],"float32"), )
paddle.minimum(Tensor([9, 1, 2],"float32"), Tensor([451143, 2],"float32"), )
paddle.mm(Tensor([4096, 4, 144, 144],"float32"), Tensor([4096, 4, 144, 32],"float32"), )
paddle.mm(Tensor([3840, 4, 144, 144],"float32"), Tensor([3840, 4, 144, 32],"float32"), )
paddle.mm(Tensor([2048, 6, 144, 144],"float32"), Tensor([2048, 6, 144, 32],"float32"), )
paddle.mod(Tensor([10, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.mod(Tensor([6, 2, 4, 5],"int32"), Tensor([6, 2, 4, 5],"int32"), )
paddle.mod(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.mode(Tensor([2, 10, 10],"float64"), -1, )
paddle.mode(Tensor([2, 10, 10],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([2, 10, 10],"float64"), 1, )
paddle.moveaxis(Tensor([2, 3, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.multigammaln(Tensor([10, 20],"float32"), 2, )
paddle.multigammaln(Tensor([10, 20],"float64"), 2, )
paddle.multiplex(inputs=list[Tensor([7, 4],"float32"),Tensor([7, 4],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], index=Tensor([4, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiply(x=Tensor([128, 256, 56, 56],"float32"), y=Tensor([128, 256, 1, 1],"float32"), )
paddle.multiply(x=Tensor([128, 224, 56, 56],"float32"), y=Tensor([128, 224, 1, 1],"float32"), )
paddle.multiply(Tensor([512, 872, 14, 14],"float32"), Tensor([512, 872, 1, 1],"float32"), )
paddle.mv(Tensor([64, 32],"float64"), Tensor([32],"float64"), )
paddle.mv(Tensor([5, 100],"float64"), Tensor([100],"float64"), )
paddle.mv(Tensor([3, 36],"float32"), Tensor([36],"float32"), )
paddle.nan_to_num(Tensor([1948, 2],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([148, 5, 3],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([400, 1],"float64"), neginf=-2.220446049250313e-16, )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), None, False, )
paddle.nanmedian(Tensor([2, 100],"float32"), axis=1, mode="min", )
paddle.nanmedian(Tensor([120],"float32"), keepdim=False, )
paddle.nanmedian(Tensor([120],"float32"), keepdim=False, mode="min", )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=0, axis=1, )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=0.35, )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.neg(Tensor([8, 16, 32],"float32"), )
paddle.neg(Tensor([32, 8],"float32"), )
paddle.neg(Tensor([32, 8],"float64"), )
paddle.negative(Tensor([2, 3, 4, 5],"float16"), )
paddle.negative(Tensor([2, 3, 4, 5],"float32"), )
paddle.negative(Tensor([2, 3, 4, 5],"float64"), )
paddle.nextafter(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nextafter(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([128, 1536, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([64, 1024, 144],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([124, 1536, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2045, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2037, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 9, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([128, 16],"float32"), Tensor([128],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([8, 8],"float32"), Tensor([8],"int64"), Tensor([8, 3],"float32"), list[list[Tensor([8, 4],"float32"),Tensor([4, 2],"float32"),],], list[2,4,], None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 32],"float64"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), Tensor([4],"int64"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), list[20,1,7,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), list[20,2,5,7,], align_corners=False, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 240, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([128, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.bilinear(Tensor([5, 5],"float32"), Tensor([5, 4],"float32"), Tensor([1000, 5, 4],"float32"), Tensor([1, 1000],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), Tensor([6, 3, 3],"float32"), Tensor([1, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.binary_cross_entropy(Tensor([16, 12096, 80],"float32"), Tensor([16, 12096, 80],"float32"), weight=Tensor([16, 12096, 80],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([16, 11109, 80],"float32"), Tensor([16, 11109, 80],"float32"), weight=Tensor([16, 11109, 80],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([16, 10164, 80],"float32"), Tensor([16, 10164, 80],"float32"), weight=Tensor([16, 10164, 80],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([16, 300, 80],"float32"), Tensor([16, 300, 80],"float32"), weight=Tensor([16, 300, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([300, 1000],"float32"), weight=Tensor([300, 1000],"float32"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([512, 28, 28],"float32"), Tensor([512, 28, 28],"float32"), weight=Tensor([512, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.celu(Tensor([2, 4, 4],"float64"), 0.2, None, )
paddle.nn.functional.celu(Tensor([2, 4, 4],"float64"), 1.0, None, )
paddle.nn.functional.celu(x=Tensor([2, 4, 4],"float64"), )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.conv1d(Tensor([32, 32, 58081],"float32"), Tensor([32, 32, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([32, 32, 58081],"float32"), Tensor([1, 32, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 512, 7],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 256, 28],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 480, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 320, 320],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 480, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.cosine_embedding_loss(Tensor([10, 3],"float32"), Tensor([10, 3],"float32"), Tensor([10],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([5, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([5, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_similarity(Tensor([210, 1024],"float32"), Tensor([210, 1024],"float32"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([32, 128],"float32"), Tensor([32, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 10],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cross_entropy(Tensor([8, 1024, 50304],"float32"), Tensor([8, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 4096, 100352],"float32"), Tensor([1, 4096, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 2048, 151936],"float32"), Tensor([1, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.elu(Tensor([1, 21504, 2],"float32"), )
paddle.nn.functional.elu(Tensor([15, 20],"float32"), 1.0, )
paddle.nn.functional.elu(Tensor([10, 20, 1],"float32"), )
paddle.nn.functional.embedding(Tensor([1, 4097],"int64"), weight=Tensor([100352, 8192],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([151936, 4096],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([50304, 4096],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.fold(Tensor([3, 12, 12],"float32"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([3, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([3, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=list[2,2,], strides=list[1,1,], paddings=list[0,0,0,0,], dilations=list[1,1,], name=None, )
paddle.nn.functional.gelu(Tensor([128, 96, 96, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 96, 96, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 96, 96, 512],"float32"), False, None, )
paddle.nn.functional.glu(Tensor([30, 498, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([30, 477, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([30, 457, 512],"float32"), -1, None, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 544],"float32"), Tensor([200, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 768],"float32"), Tensor([100, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.group_norm(Tensor([30, 256, 16, 168],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.group_norm(Tensor([30, 256, 24, 112],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.group_norm(Tensor([30, 64, 32, 336],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([64],"float32"), bias=Tensor([64],"float32"), )
paddle.nn.functional.hardshrink(Tensor([3],"float32"), -1, None, )
paddle.nn.functional.hardshrink(Tensor([3],"float32"), 0.5, None, )
paddle.nn.functional.hardshrink(Tensor([3],"float64"), -1, None, )
paddle.nn.functional.hardsigmoid(Tensor([300, 4096],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([640, 960, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([1024, 576, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardswish(Tensor([512, 64, 112, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([512, 48, 112, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([256, 80, 112, 112],"float32"), None, )
paddle.nn.functional.hardtanh(Tensor([10, 20, 1],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), -3.2, -3.2, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), -3.4, 0, None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 10, 5],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="none", )
paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 64],"float64"), None, None, Tensor([32],"float64"), Tensor([32],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 32, 128],"float32"), )
paddle.nn.functional.interpolate(Tensor([4, 256, 336, 336],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 336, 336],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 336, 320],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([64, 3, 128, 128],"float32"), Tensor([64, 3, 128, 128],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([16, 511, 257],"float32"), Tensor([16, 511, 257],"float32"), )
paddle.nn.functional.label_smooth(label=Tensor([128, 40, 33712],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(label=Tensor([160, 32, 33712],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(label=Tensor([256, 20, 33712],"float32"), epsilon=0.1, )
paddle.nn.functional.layer_norm(Tensor([7, 435, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([7, 286, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([7, 220, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.leaky_relu(Tensor([64, 64, 256, 256],"float32"), 0.1, None, )
paddle.nn.functional.leaky_relu(Tensor([12, 32, 608, 1088],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([12, 64, 304, 544],"float32"), 0.1, )
paddle.nn.functional.linear(x=Tensor([2, 25088],"float32"), weight=Tensor([25088, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 25088],"float32"), weight=Tensor([25088, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([4096, 12544],"float32"), weight=Tensor([12544, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3, 40, 40],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 40, 3],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(Tensor([3, 3, 40, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
paddle.nn.functional.log_loss(Tensor([102400, 1],"float32"), Tensor([102400, 1],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([25600, 1],"float32"), Tensor([25600, 1],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([400, 1],"float32"), Tensor([400, 1],"float32"), )
paddle.nn.functional.log_sigmoid(Tensor([10, 10, 10],"float32"), None, )
paddle.nn.functional.log_sigmoid(Tensor([10, 10, 10],"float64"), None, )
paddle.nn.functional.log_sigmoid(x=Tensor([10, 10, 10],"float32"), )
paddle.nn.functional.log_softmax(Tensor([4224, 6629],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([128, 192612],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([2944, 6629],"float32"), axis=1, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float64"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float64"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.margin_ranking_loss(Tensor([128],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), 0.5, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "mean", None, )
paddle.nn.functional.max_pool2d(Tensor([1536, 24, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 128, 480, 480],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 704, 704],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool3d(Tensor([8, 64, 16, 112, 112],"float32"), kernel_size=tuple(3,3,3,), stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(x=Tensor([8, 320, 4, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 32, 32, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 3],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3, 3],"float32"), groups=2, )
paddle.nn.functional.mish(Tensor([12, 256, 40, 40],"float32"), )
paddle.nn.functional.mish(Tensor([12, 128, 40, 40],"float32"), )
paddle.nn.functional.mish(Tensor([12, 512, 20, 20],"float32"), )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 1],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([64, 4, 3, 64, 128],"float32"), Tensor([64, 4, 3, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 3, 3, 64, 128],"float32"), Tensor([64, 3, 3, 64, 128],"float32"), "none", )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), reduction="mean", weight=Tensor([5, 5],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), weight=Tensor([5, 5],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), reduction="mean", weight=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 3, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 3, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="none", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 3, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.normalize(Tensor([2331, 512],"float32"), )
paddle.nn.functional.normalize(Tensor([2081, 512],"float32"), )
paddle.nn.functional.normalize(Tensor([2009, 512],"float32"), )
paddle.nn.functional.npair_loss(Tensor([18, 6],"float32"), positive=Tensor([18, 6],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.pad(Tensor([8162, 8, 1280],"bfloat16"), list[0,6,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([7710, 8, 1280],"bfloat16"), list[0,2,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([7573, 8, 1280],"bfloat16"), list[0,3,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 128, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 64, 64],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 128, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nn.functional.prelu(Tensor([128, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 256, 28, 28],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.relu(Tensor([640, 64, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 128, 480, 480],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 256, 352, 352],"float32"), )
paddle.nn.functional.relu6(Tensor([128, 192, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([256, 96, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([128, 144, 112, 112],"float32"), )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([3, 3, 3],"float64"), 1.0507009873554805, 0, None, )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([8],"int32"), maxlen=Tensor([],"int64"), dtype="float32", )
paddle.nn.functional.sequence_mask(Tensor([8],"int32"), maxlen=4, dtype="float32", )
paddle.nn.functional.sigmoid(Tensor([8, 32, 400, 400],"float32"), )
paddle.nn.functional.sigmoid(Tensor([372, 304, 336],"float32"), )
paddle.nn.functional.sigmoid(Tensor([364, 304, 336],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.silu(Tensor([128, 128, 128, 128],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 256, 64, 64],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 64, 128, 128],"float32"), None, )
paddle.nn.functional.smooth_l1_loss(Tensor([7, 50000],"float32"), Tensor([7, 50000],"float32"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([64, 187, 8],"float32"), Tensor([64, 187, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([1914, 50],"float32"), Tensor([1914, 50],"float32"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), "sum", None, )
paddle.nn.functional.softmax(Tensor([4096, 4, 144, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([3840, 4, 144, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([60, 2304, 2304],"float32"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 64],"float32"), Tensor([2, 16, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 64],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 64],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softplus(Tensor([13, 1007, 64],"float32"), )
paddle.nn.functional.softplus(Tensor([13, 10, 64],"float32"), )
paddle.nn.functional.softplus(Tensor([14, 7, 64],"float32"), )
paddle.nn.functional.softshrink(Tensor([32, 15, 8, 8, 32, 2],"float32"), threshold=0.01, )
paddle.nn.functional.softshrink(Tensor([3, 3, 3],"float64"), 0, None, )
paddle.nn.functional.softshrink(Tensor([3, 3, 3],"float64"), 5, None, )
paddle.nn.functional.softsign(Tensor([300, 4096],"float32"), )
paddle.nn.functional.softsign(Tensor([32, 128],"float32"), )
paddle.nn.functional.softsign(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 100],"float16"), Tensor([8, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 100],"float32"), Tensor([8, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float64"), label=Tensor([3, 2, 1, 2],"float64"), )
paddle.nn.functional.swish(Tensor([128, 96, 112, 112],"float32"), )
paddle.nn.functional.swish(Tensor([16, 64, 384, 384],"float32"), )
paddle.nn.functional.swish(Tensor([16, 64, 368, 368],"float32"), )
paddle.nn.functional.tanh(Tensor([282600, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([93401, 90],"float32"), None, )
paddle.nn.functional.tanh(Tensor([147015, 50],"float32"), None, )
paddle.nn.functional.tanhshrink(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.tanhshrink(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.tanhshrink(Tensor([4],"float32"), None, )
paddle.nn.functional.temporal_shift(Tensor([240, 256, 56, 56],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 56, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([240, 512, 28, 28],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 3],"float32"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 3],"float64"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 3, 3],"float32"), )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.unfold(Tensor([64, 3, 224, 224],"float32"), 16, 16, )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 64],"float32"), 3, 1, 1, tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 64],"float32"), 3, 1, tuple(1,1,), 1, )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"int64"), Tensor([4],"int32"), )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"float64"), list[2,2,2,2,], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nonzero(Tensor([512, 80, 28, 28],"float32"), )
paddle.nonzero(Tensor([511, 80, 28, 28],"float32"), )
paddle.nonzero(Tensor([510, 80, 28, 28],"float32"), )
paddle.not_equal(Tensor([4224],"int64"), Tensor([4224],"int64"), )
paddle.not_equal(Tensor([2944],"int64"), Tensor([2944],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.numel(Tensor([65536000],"float32"), )
paddle.numel(Tensor([64225280],"float32"), )
paddle.numel(Tensor([38895616],"float32"), )
paddle.ones(list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], )
paddle.ones(shape=Tensor([2],"int32"), )
paddle.ones(shape=Tensor([2],"int32"), dtype="int32", )
paddle.ones_like(Tensor([176, 392, 392],"float32"), )
paddle.ones_like(Tensor([160, 392, 392],"float32"), )
paddle.ones_like(Tensor([144, 392, 392],"float32"), )
paddle.outer(Tensor([32768],"float32"), Tensor([32],"float32"), )
paddle.outer(Tensor([8192],"float32"), Tensor([4],"float32"), )
paddle.outer(Tensor([8192],"float32"), Tensor([2],"float32"), )
paddle.pdist(Tensor([50, 20],"float64"), 2.0, )
paddle.pdist(Tensor([10, 20],"float32"), 0, )
paddle.pdist(Tensor([10, 20],"float32"), 1.0, )
paddle.polar(Tensor([1, 8192, 64],"float32"), Tensor([1, 8192, 64],"float32"), )
paddle.polar(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.polar(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.polygamma(Tensor([10, 20, 1],"float32"), 1, )
paddle.polygamma(Tensor([2, 2, 6],"float64"), 2, )
paddle.polygamma(Tensor([2, 6],"float64"), 1, )
paddle.positive(Tensor([10, 1024],"float32"), )
paddle.positive(Tensor([2, 3, 4, 5],"float16"), )
paddle.positive(Tensor([2, 3, 4, 5],"float32"), )
paddle.pow(Tensor([4, 81, 94, 311],"float32"), 2.0, )
paddle.pow(Tensor([1024, 1024, 8],"float32"), 2, )
paddle.pow(Tensor([1024, 1024, 8],"float64"), 2, )
paddle.prod(Tensor([16, 1024],"float32"), -1, )
paddle.prod(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
paddle.quantile(Tensor([1124, 32],"float32"), 0.30000000000000004, )
paddle.quantile(Tensor([512, 32],"float32"), 0.30000000000000004, )
paddle.quantile(Tensor([3, 6, 3, 4, 2, 5],"float64"), q=0.5, )
paddle.rad2deg(Tensor([8, 16, 32],"float32"), )
paddle.rad2deg(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.rad2deg(x=Tensor([4, 4, 4],"float64"), )
paddle.real(Tensor([50, 8, 39, 14, 14],"complex64"), )
paddle.real(x=Tensor([50, 8, 39, 14, 14],"complex64"), )
paddle.real(Tensor([10, 10, 10, 20],"complex64"), )
paddle.reciprocal(Tensor([8, 1, 960, 960],"float32"), )
paddle.reciprocal(Tensor([16, 1, 640, 640],"float32"), )
paddle.reciprocal(Tensor([4, 1, 960, 960],"float32"), )
paddle.reduce_as(Tensor([30, 200, 40],"float32"), Tensor([200, 40],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"int32"), Tensor([1, 2, 3, 4, 5],"int32"), )
paddle.renorm(Tensor([10, 20, 1],"float32"), 1.0, -1, 2.05, )
paddle.renorm(x=Tensor([3, 2, 3],"float32"), p=1, axis=0, max_norm=5, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=1, axis=0, max_norm=5, )
paddle.repeat_interleave(Tensor([5, 1, 768, 768],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([14, 1, 384, 384],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([1, 1500, 1280],"float32"), 5, axis=0, )
paddle.reverse(Tensor([4, 12, 32],"float64"), axis=1, )
paddle.reverse(Tensor([12, 4, 16],"float64"), axis=list[0,], )
paddle.reverse(Tensor([12, 4, 8],"float64"), axis=0, )
paddle.roll(Tensor([128, 56, 56, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 56, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([64, 96, 96, 128],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.round(Tensor([128, 128],"float32"), )
paddle.round(Tensor([16, 256],"float64"), )
paddle.round(x=Tensor([3, 3, 3],"float32"), )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.rsqrt(Tensor([10000, 2, 3],"float32"), )
paddle.rsqrt(Tensor([10000, 2, 3],"float64"), )
paddle.rsqrt(Tensor([13, 1007, 1],"float32"), )
paddle.scale(Tensor([4, 256, 256, 256],"float16"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 256, 256, 256],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 256, 256, 256],"float32"), scale=1.1111111111111112, )
paddle.scatter(Tensor([262144, 64],"float32"), Tensor([21955],"int32"), Tensor([21955, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 64],"float32"), Tensor([20524],"int32"), Tensor([20524, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 64],"float32"), Tensor([19780],"int32"), Tensor([19780, 64],"float32"), overwrite=True, )
paddle.scatter_nd(Tensor([3, 2],"int64"), Tensor([3, 9, 10],"float32"), list[3,5,9,10,], )
paddle.scatter_nd(Tensor([38, 1],"int64"), Tensor([38],"float32"), list[128,], )
paddle.scatter_nd(Tensor([32, 1],"int64"), Tensor([32],"int64"), list[128,], )
paddle.scatter_nd_add(Tensor([1, 8192, 7168],"bfloat16"), Tensor([5953, 2],"int64"), Tensor([5953, 7168],"bfloat16"), )
paddle.scatter_nd_add(Tensor([1, 8192, 7168],"bfloat16"), Tensor([5876, 2],"int64"), Tensor([5876, 7168],"bfloat16"), )
paddle.scatter_nd_add(Tensor([1, 8192, 7168],"bfloat16"), Tensor([5859, 2],"int64"), Tensor([5859, 7168],"bfloat16"), )
paddle.searchsorted(Tensor([1024],"float32"), Tensor([512],"float32"), )
paddle.searchsorted(Tensor([1024],"float64"), Tensor([512],"float64"), )
paddle.searchsorted(Tensor([1024],"int32"), Tensor([512],"int32"), )
paddle.select_scatter(Tensor([2, 3, 4, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4],"float32"), Tensor([2, 4],"float32"), 1, 1, )
paddle.sgn(Tensor([12, 20, 2],"float32"), )
paddle.sgn(Tensor([12, 20, 2],"float64"), )
paddle.sgn(Tensor([2, 4],"complex128"), )
paddle.shape(Tensor([4, 1600, 376, 280],"float32"), )
paddle.shape(Tensor([4, 128, 256, 256],"float16"), )
paddle.shape(Tensor([4, 128, 256, 256],"float32"), )
paddle.shard_index(input=Tensor([4, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, )
paddle.shard_index(input=Tensor([4, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
paddle.shard_index(input=Tensor([4, 1],"int64"), index_num=13, nshards=3, shard_id=0, )
paddle.sign(Tensor([32, 32, 128],"float32"), )
paddle.sign(Tensor([64, 1, 28, 28],"float32"), )
paddle.sign(Tensor([7, 1, 384],"int64"), )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), 512, 99, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([257, 471],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.stft(Tensor([16, 25500],"float32"), 2048, 240, 1200, window=Tensor([1200],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([16, 25500],"float32"), 1024, 120, 600, window=Tensor([600],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([16, 25500],"float32"), 512, 50, 240, window=Tensor([240],"float32"), center=True, pad_mode="reflect", )
paddle.signbit(Tensor([11, 17, 10],"int16"), )
paddle.signbit(Tensor([11, 17, 10],"int32"), )
paddle.signbit(Tensor([12, 20, 2],"float32"), )
paddle.sin(Tensor([128512, 100],"float32"), )
paddle.sin(Tensor([50000, 200],"float32"), )
paddle.sin(Tensor([68608, 100],"float32"), )
paddle.sinc(Tensor([16, 64],"float32"), )
paddle.sinc(Tensor([16, 64],"float64"), )
paddle.sinc(Tensor([6],"float32"), )
paddle.sinh(Tensor([8, 16, 32],"complex128"), )
paddle.sinh(Tensor([8, 16, 32],"complex64"), )
paddle.sinh(Tensor([8, 16, 32],"float32"), )
paddle.slice(Tensor([65344, 1280],"bfloat16"), axes=list[0,], starts=list[0,], ends=list[8168,], )
paddle.slice(Tensor([65344, 1280],"bfloat16"), axes=list[0,], starts=list[16336,], ends=list[24504,], )
paddle.slice(Tensor([65344, 1280],"bfloat16"), axes=list[0,], starts=list[24504,], ends=list[32672,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float32"), Tensor([8, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float64"), Tensor([8, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float32"), Tensor([8, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.split(Tensor([7168, 111616],"float8_e4m3fn"), num_or_sections=list[55296,53760,0,512,512,1536,], axis=-1, )
paddle.split(Tensor([7168, 108544],"float8_e4m3fn"), num_or_sections=list[512,0,48640,59392,0,0,], axis=-1, )
paddle.split(Tensor([7168, 106496],"float8_e4m3fn"), num_or_sections=list[47104,49152,0,512,3584,6144,], axis=-1, )
paddle.sqrt(Tensor([64, 3, 256, 256],"float32"), )
paddle.sqrt(Tensor([128, 93431],"float32"), )
paddle.sqrt(Tensor([4, 15, 3, 256, 256],"float32"), )
paddle.square(Tensor([128, 93431],"float32"), )
paddle.square(Tensor([104, 93431],"float32"), )
paddle.square(Tensor([3548, 12, 170, 1],"float32"), )
paddle.squeeze(Tensor([421120, 25, 4],"float32"), axis=-1, )
paddle.squeeze(Tensor([8, 512, 1, 100, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([105344, 128],"float32"), )
paddle.stack(list[Tensor([7168, 7168],"bfloat16"),Tensor([7168, 7168],"bfloat16"),Tensor([7168, 7168],"bfloat16"),Tensor([7168, 7168],"bfloat16"),Tensor([7168, 7168],"bfloat16"),Tensor([7168, 7168],"bfloat16"),], axis=0, )
paddle.stack(list[Tensor([8, 32, 38367, 4],"float32"),Tensor([8, 32, 38367, 4],"float32"),Tensor([8, 32, 38367, 4],"float32"),Tensor([8, 32, 38367, 4],"float32"),Tensor([8, 32, 38367, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([8, 32, 36828, 4],"float32"),Tensor([8, 32, 36828, 4],"float32"),Tensor([8, 32, 36828, 4],"float32"),Tensor([8, 32, 36828, 4],"float32"),Tensor([8, 32, 36828, 4],"float32"),], axis=-2, )
paddle.stanh(x=Tensor([2, 3, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([2, 2],"float32"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([2, 2],"float64"), scale_a=6.42, scale_b=3.58, )
paddle.std(Tensor([32, 32],"float32"), )
paddle.std(Tensor([1, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 10],"float64"), 2, True, False, )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.subtract(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 1],"float32"), )
paddle.subtract(Tensor([64, 4, 3, 64, 128],"float32"), Tensor([64, 4, 3, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 3, 3, 64, 128],"float32"), Tensor([64, 3, 3, 64, 128],"float32"), )
paddle.sum(Tensor([6078, 32, 896],"bfloat16"), axis=1, keepdim=False, )
paddle.sum(Tensor([6036, 32, 896],"bfloat16"), axis=1, keepdim=False, )
paddle.sum(Tensor([6017, 32, 896],"bfloat16"), axis=1, keepdim=False, )
paddle.t(Tensor([512, 512],"int64"), )
paddle.t(Tensor([10, 20],"float32"), )
paddle.t(Tensor([20, 10],"float32"), )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
paddle.take(Tensor([3, 4],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take_along_axis(Tensor([8, 63, 768],"float32"), axis=1, indices=Tensor([8, 7, 768],"int64"), )
paddle.take_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 8],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 7],"int64"), axis=-1, )
paddle.tan(Tensor([8, 16, 32],"complex128"), )
paddle.tan(Tensor([8, 16, 32],"complex64"), )
paddle.tan(Tensor([8, 16, 32],"float32"), )
paddle.tanh(Tensor([64, 26, 512, 1, 40],"float32"), )
paddle.tanh(Tensor([16, 64, 25500],"float32"), )
paddle.tanh(Tensor([8, 32, 241, 241],"float32"), )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensordot(x=Tensor([4, 2, 3, 5, 4],"float64"), y=Tensor([2, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], )
paddle.tile(Tensor([16, 10, 1, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 1, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([216, 248, 1, 1, 2],"float32"), list[1,1,1,1,1,], )
paddle.tolist(Tensor([2, 5],"float32"), )
paddle.tolist(Tensor([2, 3],"int64"), )
paddle.tolist(Tensor([5],"float32"), )
paddle.topk(Tensor([53, 369303],"float32"), k=1, axis=0, )
paddle.topk(Tensor([55, 349866],"float32"), k=1, axis=0, )
paddle.topk(Tensor([49, 343728],"float32"), k=1, axis=0, )
paddle.trace(x=Tensor([3, 4],"float64"), offset=0, axis1=0, axis2=1, )
paddle.trace(x=Tensor([2, 3, 2],"float64"), offset=0, axis1=-3, axis2=-2, )
paddle.trace(x=Tensor([2, 3, 2],"float64"), offset=1, axis1=0, axis2=2, )
paddle.transpose(Tensor([6, 7168, 7168],"bfloat16"), list[0,2,1,], )
paddle.transpose(Tensor([4, 150, 512, 512],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([6, 3584, 7168],"bfloat16"), list[0,2,1,], )
paddle.trapezoid(y=Tensor([3, 3, 4],"float32"), x=None, dx=Tensor([],"float32"), axis=1, )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=-1, )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=0, )
paddle.tril(Tensor([1, 1, 2048, 2048],"bool"), )
paddle.tril(Tensor([1, 1, 2048, 2048],"float32"), )
paddle.tril(Tensor([2048, 2048],"bool"), )
paddle.tril_indices(4, 4, -1, )
paddle.tril_indices(4, 4, 2, )
paddle.tril_indices(row=10, col=10, offset=-2, )
paddle.triu(Tensor([1, 1, 4096, 4096],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 2048, 2048],"float16"), )
paddle.triu(Tensor([1, 1, 1024, 1024],"float16"), diagonal=1, )
paddle.triu_indices(4, 4, -1, )
paddle.triu_indices(4, 4, 2, )
paddle.triu_indices(row=10, col=10, offset=-2, )
paddle.trunc(input=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([6, 6, 6, 6],"float64"), )
paddle.trunc(Tensor([20, 20],"float32"), )
paddle.unbind(Tensor([2, 3, 8, 8],"float32"), axis=0, )
paddle.unbind(Tensor([3, 9, 5],"float32"), axis=0, )
paddle.unbind(Tensor([4, 5, 6],"float32"), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([4, 6, 16],"bool"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 16],"float16"), axis=0, shape=tuple(2,2,), )
paddle.unfold(Tensor([5, 5],"float16"), 0, 5, 1, )
paddle.unfold(Tensor([5, 5],"float32"), 0, 5, 1, )
paddle.unfold(Tensor([5, 5],"float64"), 0, 5, 1, )
paddle.unique_consecutive(Tensor([100],"float64"), )
paddle.unique_consecutive(Tensor([100],"float64"), return_inverse=True, return_counts=True, )
paddle.unique_consecutive(Tensor([100],"float64"), return_inverse=True, return_counts=True, axis=-1, )
paddle.unsqueeze(Tensor([512, 50, 256],"float32"), axis=2, )
paddle.unsqueeze(Tensor([416, 50, 256],"float32"), axis=2, )
paddle.unsqueeze(Tensor([4, 1024, 1024],"int64"), 1, )
paddle.unstack(x=Tensor([2, 32, 512],"float32"), axis=0, )
paddle.unstack(Tensor([5, 10, 15],"float32"), axis=-1, )
paddle.unstack(Tensor([5, 10, 15],"float32"), axis=-2, )
paddle.vander(Tensor([5],"complex128"), 0, False, )
paddle.vander(Tensor([5],"complex128"), 0, True, )
paddle.vander(Tensor([5],"complex128"), 1, False, )
paddle.var(Tensor([96, 96, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([384, 192, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([384, 96, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.vecdot(Tensor([3, 4, 5],"float64"), Tensor([3, 4, 5],"float64"), axis=1, )
paddle.vecdot(Tensor([2, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), axis=-1, )
paddle.vecdot(Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), axis=-1, )
paddle.view(Tensor([10, 10, 10, 20],"float32"), list[-1,], )
paddle.view(Tensor([10, 10, 10, 20],"float32"), list[10,10,10,10,-1,], )
paddle.view(Tensor([10, 10, 10, 20],"float32"), list[10,100,-1,], )
paddle.view_as(Tensor([10, 10, 10, 20],"float32"), Tensor([10, 100, 20],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 128, 200, 200],"float32"), offset=Tensor([6, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 128, 76, 136],"float32"), offset=Tensor([20, 18, 76, 136],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 128, 76, 136],"float32"), offset=Tensor([20, 18, 76, 136],"float32"), weight=Tensor([64, 128, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 136],"float32"), )
paddle.vision.ops.roi_align(x=Tensor([8, 256, 336, 336],"float32"), boxes=Tensor([2245, 4],"float32"), boxes_num=Tensor([8],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([8, 256, 328, 336],"float32"), boxes=Tensor([2908, 4],"float32"), boxes_num=Tensor([8],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([8, 256, 320, 336],"float32"), boxes=Tensor([2857, 4],"float32"), boxes_num=Tensor([8],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(x=Tensor([1, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list[2,4,], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.where(Tensor([4, 280, 376, 25, 3],"bool"), Tensor([4, 280, 376, 25, 3],"float32"), Tensor([4, 280, 376, 25, 3],"float32"), )
paddle.where(Tensor([1, 400, 65856],"bool"), Tensor([1, 400, 65856],"float32"), Tensor([1, 400, 65856],"float32"), )
paddle.where(Tensor([4, 64, 320, 320],"bool"), Tensor([4, 64, 320, 320],"float32"), Tensor([4, 64, 320, 320],"float32"), )
paddle.zeros(list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], )
paddle.zeros(Tensor([2],"int32"), dtype=Dtype(float32), )
paddle.zeros(Tensor([2],"int32"), dtype=Dtype(int64), )
paddle.zeros_like(Tensor([4, 64, 320, 320],"float16"), )
paddle.zeros_like(Tensor([4, 64, 320, 320],"float32"), )
paddle.zeros_like(Tensor([4, 525, 12096],"float32"), )
paddle.nn.functional.gather_tree(Tensor([21, 8, 4],"int64"), Tensor([21, 8, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 4, 8],"int64"), Tensor([11, 4, 8],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 4, 4],"int64"), Tensor([11, 4, 4],"int64"), )
paddle.rank(input=Tensor([3, 2, 2, 2],"float64"), )
paddle.rank(Tensor([3, 5],"float32"), )
paddle.rank(input=Tensor([2, 2],"float64"), )
paddle.Tensor.greater_equal(Tensor([21],"int64"), Tensor([],"int64"), )
paddle.Tensor.greater_equal(Tensor([19],"int64"), Tensor([],"int64"), )
paddle.Tensor.slice(Tensor([4, 4],"float32"), list[1,], list[0,], list[1,], )
paddle.Tensor.take_along_axis(Tensor([128, 1000],"float32"), indices=Tensor([128, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 1000],"float32"), indices=Tensor([80, 1],"int32"), axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 4],"float32"), x=None, dx=Tensor([],"int64"), axis=1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=0, )
paddle.Tensor.rank(Tensor([256, 2048, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([256, 1536, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([256, 768, 3, 3],"float32"), )
paddle.unique(Tensor([120],"int64"), return_index=True, return_inverse=True, return_counts=True, dtype="int32", )
paddle.unique(Tensor([120],"int64"), )
paddle.unique(Tensor([89],"int64"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 7, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 1, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 11, 32, 32],"float32"), )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float16"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float32"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
paddle.reshape(x=Tensor([100352, 8192],"bfloat16"), shape=list[822083584,], )
paddle.reshape(x=Tensor([8192, 100352],"bfloat16"), shape=list[822083584,], )
paddle.reshape(Tensor([111616, 7168],"bfloat16"), list[-1,7168,], )
paddle.nn.functional.avg_pool1d(Tensor([16, 2, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 1, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([13, 1, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([91, 32, 7],"float32"), 7, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.Tensor.__getitem__(Tensor([8168, 8, 1280],"bfloat16"), slice(None,-6,None), )
paddle.Tensor.__getitem__(Tensor([7712, 8, 1280],"bfloat16"), slice(None,-2,None), )
paddle.Tensor.__getitem__(Tensor([7576, 8, 1280],"bfloat16"), slice(None,-3,None), )
paddle.Tensor.__setitem__(Tensor([1, 8192, 7168],"float32"), Tensor([1, 8192],"bool"), Tensor([8162, 7168],"bfloat16"), )
paddle.Tensor.__setitem__(Tensor([1, 8192, 7168],"float32"), Tensor([1, 8192],"bool"), Tensor([7780, 7168],"bfloat16"), )
paddle.Tensor.__setitem__(Tensor([1, 8192, 7168],"float32"), Tensor([1, 8192],"bool"), Tensor([7710, 7168],"bfloat16"), )
paddle.Tensor.put_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 8],"int64"), Tensor([],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 7],"int64"), Tensor([],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 6],"int64"), Tensor([],"float32"), axis=1, )
paddle.empty(list[1,896,], dtype=Dtype(bfloat16), )
paddle.empty(list[1,896,], dtype=Dtype(float32), )
paddle.empty(list[1,], dtype="int64", )
paddle.empty_like(Tensor([4096, 64],"bool"), )
paddle.empty_like(Tensor([4096, 64],"float32"), )
paddle.empty_like(Tensor([172],"uint8"), )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([8168, 1280],"bfloat16"), Tensor([8168, 1280],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([7712, 1280],"bfloat16"), Tensor([7712, 1280],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([7576, 1280],"bfloat16"), Tensor([7576, 1280],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 8192],"bfloat16"), Tensor([8192, 100352],"bfloat16"), None, transpose_weight=False, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 16384],"bfloat16"), Tensor([16384, 8192],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 8192, 7168],"bfloat16"), Tensor([7168, 12800],"bfloat16"), Tensor([12800],"bfloat16"), )
paddle.nn.functional.dropout(Tensor([8168, 1280],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([7712, 1280],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([7576, 1280],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 4096, 64, 128],"bfloat16"), None, None, rotary_emb_base=10000, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 4096, 8, 128],"bfloat16"), None, None, rotary_emb_base=10000, )
