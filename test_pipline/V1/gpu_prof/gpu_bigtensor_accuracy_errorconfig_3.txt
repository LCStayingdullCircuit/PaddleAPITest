paddle.acosh(Tensor([],"float32"), )
paddle.add(x=Tensor([8, 256, 352, 352],"float32"), y=Tensor([8, 256, 352, 352],"float32"), )
paddle.add(x=Tensor([8, 256, 336, 336],"float32"), y=Tensor([8, 256, 336, 336],"float32"), )
paddle.add(x=Tensor([8, 256, 320, 352],"float32"), y=Tensor([8, 256, 320, 352],"float32"), )
paddle.add_n(list[Tensor([64, 128, 64, 64],"float16"),Tensor([64, 128, 64, 64],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 64, 64],"float32"),Tensor([64, 128, 64, 64],"float32"),], )
paddle.add_n(list[Tensor([64, 256, 32, 32],"float16"),Tensor([64, 256, 32, 32],"float16"),], )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([10, 10],"float32"), )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), )
paddle.all(Tensor([448],"bool"), )
paddle.all(Tensor([5, 6, 10],"bool"), None, False, None, )
paddle.all(Tensor([5, 6, 10],"float64"), None, False, None, )
paddle.allclose(Tensor([30522, 8],"float32"), Tensor([30522, 8],"float32"), )
paddle.allclose(Tensor([1124, 32],"float32"), Tensor([1124, 32],"float32"), )
paddle.allclose(Tensor([13, 32, 64],"float32"), Tensor([13, 32, 64],"float32"), rtol=0.0001, atol=0.0001, )
paddle.amax(Tensor([10, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([10, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([10, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([10, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([10, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([10, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.angle(Tensor([2, 3],"complex128"), )
paddle.angle(Tensor([],"complex64"), )
paddle.any(Tensor([1, 300, 4096],"bool"), )
paddle.any(Tensor([1124, 32],"bool"), )
paddle.any(Tensor([512, 32],"bool"), )
paddle.arange(-100, 100, )
paddle.arange(-14, 14, 1, dtype=Dtype(float32), )
paddle.arange(-19, 20, dtype="float32", name=None, )
paddle.argmax(Tensor([29151, 100, 64],"float32"), axis=1, )
paddle.argmax(Tensor([80239, 20, 64],"float32"), axis=1, )
paddle.argmax(Tensor([29151, 100, 32],"float32"), axis=1, )
paddle.argmin(Tensor([4, 4, 4, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 5, 5],"float64"), axis=0, )
paddle.argsort(Tensor([1500],"float32"), stable=True, )
paddle.argsort(Tensor([1500],"float64"), stable=True, )
paddle.argsort(Tensor([1500],"int32"), stable=True, )
paddle.as_complex(Tensor([1, 8192, 7, 64, 2],"bfloat16"), )
paddle.as_complex(Tensor([32, 15, 8, 8, 32, 2],"float32"), )
paddle.as_complex(Tensor([1, 8192, 1, 64, 2],"bfloat16"), )
paddle.as_real(Tensor([1, 8192, 7, 64],"complex64"), )
paddle.as_real(Tensor([1, 8192, 1, 64],"complex64"), )
paddle.as_real(Tensor([4, 32, 32, 33],"complex64"), )
paddle.as_strided(Tensor([32, 32],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 32],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 32],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.asin(Tensor([8, 16, 32],"complex128"), )
paddle.asin(Tensor([8, 16, 32],"complex64"), )
paddle.asin(Tensor([8, 16, 32],"float32"), )
paddle.asinh(Tensor([8, 16, 32],"complex128"), )
paddle.asinh(Tensor([8, 16, 32],"complex64"), )
paddle.asinh(Tensor([8, 16, 32],"float32"), )
paddle.assign(Tensor([822083584],"bfloat16"), Tensor([822083584],"bfloat16"), )
paddle.assign(Tensor([469762048],"bfloat16"), Tensor([469762048],"bfloat16"), )
paddle.assign(Tensor([234881024],"bfloat16"), Tensor([234881024],"bfloat16"), )
paddle.atan(Tensor([8, 16, 32],"complex128"), )
paddle.atan(Tensor([8, 16, 32],"complex64"), )
paddle.atan(Tensor([8, 16, 32],"float32"), )
paddle.atan2(Tensor([111, 222, 333],"float64"), Tensor([222, 333],"float64"), )
paddle.atan2(Tensor([100],"float64"), Tensor([100, 100],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 6, 6],"float64"), y=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.atanh(Tensor([8, 16, 32],"complex128"), )
paddle.atanh(Tensor([8, 16, 32],"complex64"), )
paddle.atanh(Tensor([8, 16, 32],"float32"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.audio.functional.get_window("bartlett", 1, )
paddle.audio.functional.get_window("bartlett", 512, )
paddle.audio.functional.get_window("blackman", 1, )
paddle.bincount(Tensor([16],"int32"), weights=Tensor([16],"float32"), )
paddle.bincount(Tensor([20],"int64"), minlength=Tensor([1],"int32"), )
paddle.bincount(x=Tensor([10],"int32"), weights=Tensor([10],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_invert(Tensor([2, 3, 4, 5],"int32"), )
paddle.bitwise_invert(Tensor([3, 4, 1],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([200, 300],"int64"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bmm(Tensor([26, 1024, 1024],"float32"), Tensor([26, 1024, 12],"float32"), )
paddle.bmm(Tensor([112, 435, 435],"float32"), Tensor([112, 435, 64],"float32"), )
paddle.bmm(Tensor([4, 81, 7332],"float32"), Tensor([4, 7332, 512],"float32"), )
paddle.broadcast_shape(list[0,0,0,], list[0,], )
paddle.broadcast_shape(list[0,1,3,], list[0,1,0,3,], )
paddle.broadcast_shape(list[0,1,3,], list[0,1,1,5,3,], )
paddle.broadcast_tensors(list[Tensor([32, 3, 1024, 768],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([16384, 1024],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([200, 200],"float64"),Tensor([200, 200],"float64"),], )
paddle.broadcast_to(Tensor([64, 1327104],"float32"), tuple(64,1327104,), )
paddle.broadcast_to(Tensor([64, 1327104],"int64"), tuple(64,1327104,), )
paddle.broadcast_to(Tensor([111, 222, 333],"float64"), list[111,222,333,], )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), out_int32=True, )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), right=True, )
paddle.cartesian_prod(list[Tensor([3],"complex128"),Tensor([5],"complex128"),Tensor([5],"complex128"),], )
paddle.cartesian_prod(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([5],"int32"),Tensor([0],"int32"),], )
paddle.cartesian_prod(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([5],"int32"),], )
paddle.cast(Tensor([2, 1, 32768, 32768],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([8, 1024, 50304],"float16"), dtype="float32", )
paddle.cast(Tensor([128256, 3072],"bfloat16"), Dtype(float16), )
paddle.cdist(Tensor([8550, 4],"float32"), Tensor([1, 4],"float32"), p=1, )
paddle.cdist(Tensor([6380, 4],"float32"), Tensor([1, 4],"float32"), p=1, )
paddle.cdist(Tensor([900, 4],"float32"), Tensor([1, 4],"float32"), p=1, )
paddle.ceil(Tensor([32, 32, 128],"float32"), )
paddle.ceil(Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.ceil(Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.chunk(Tensor([16, 128, 25500],"float32"), 2, axis=1, )
paddle.chunk(Tensor([4, 216, 64, 64],"float16"), 3, axis=1, )
paddle.chunk(Tensor([4, 216, 64, 64],"float32"), 3, axis=1, )
paddle.clip(Tensor([3, 3840, 10240],"float32"), 0, 255, )
paddle.clip(Tensor([24, 17, 256, 256],"float64"), min=0, max=2, )
paddle.clip(Tensor([1408, 6144],"float32"), min=-2, max=2, )
paddle.clone(Tensor([43, 256, 56, 56],"float32"), )
paddle.clone(Tensor([145, 12, 112, 112],"float32"), )
paddle.clone(Tensor([22, 64, 112, 112],"float32"), )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.combinations(Tensor([10],"float64"), 5, False, )
paddle.combinations(Tensor([10],"int32"), 1, True, )
paddle.combinations(Tensor([10],"int64"), 0, True, )
paddle.complex(Tensor([20, 64, 1051],"float32"), Tensor([20, 64, 1051],"float32"), )
paddle.complex(Tensor([20, 64, 1001],"float32"), Tensor([20, 64, 1001],"float32"), )
paddle.complex(Tensor([1, 8192, 64],"float32"), Tensor([1, 8192, 64],"float32"), )
paddle.concat(list[Tensor([822083584],"bfloat16"),], )
paddle.concat(list[Tensor([469762048],"bfloat16"),], )
paddle.concat(list[Tensor([512, 32, 112, 112],"float16"),Tensor([512, 32, 112, 112],"float16"),], axis=1, )
paddle.conj(Tensor([2, 20, 2, 3],"complex128"), )
paddle.conj(Tensor([2, 20, 2, 3],"complex64"), )
paddle.conj(Tensor([2, 20, 2, 3],"float32"), )
paddle.copysign(Tensor([8, 17, 5, 6, 7],"float16"), Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([12, 20, 2],"float32"), Tensor([12, 20, 2],"float32"), )
paddle.copysign(Tensor([12, 20, 2],"float64"), Tensor([12, 20, 2],"float64"), )
paddle.cos(Tensor([5000, 256],"float32"), )
paddle.cos(Tensor([32768, 32],"float32"), )
paddle.cos(Tensor([8192, 128],"float32"), )
paddle.cosh(Tensor([8, 32, 241, 241],"float32"), )
paddle.cosh(Tensor([10, 20, 1],"float32"), )
paddle.cosh(x=Tensor([3, 3, 3],"float32"), )
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.crop(x=Tensor([2, 3, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([3, 3],"float32"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=0, )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=1, )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=2, )
paddle.cummax(Tensor([100, 100],"float32"), )
paddle.cummax(Tensor([100, 100],"float32"), axis=-1, )
paddle.cummax(Tensor([100, 100],"float32"), axis=-2, )
paddle.cummin(Tensor([100, 100],"float32"), )
paddle.cummin(Tensor([100, 100],"float32"), axis=-1, )
paddle.cummin(Tensor([100, 100],"float32"), axis=-2, )
paddle.cumprod(Tensor([2, 3, 10, 10],"float64"), 1, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=1, )
paddle.cumsum(Tensor([1038765],"float32"), axis=0, )
paddle.cumsum(Tensor([1037889],"float32"), axis=0, )
paddle.cumsum(Tensor([1034011],"float32"), axis=0, )
paddle.deg2rad(Tensor([8, 16, 32],"float32"), )
paddle.deg2rad(Tensor([6],"float32"), )
paddle.deg2rad(Tensor([1],"int64"), )
paddle.diag(Tensor([2000, 2000],"float32"), )
paddle.diag(Tensor([2000, 2000],"float32"), offset=-1, )
paddle.diag(Tensor([2000, 2000],"float32"), offset=1, )
paddle.diag_embed(Tensor([2, 3, 12],"float64"), )
paddle.diag_embed(Tensor([2, 3, 8],"float64"), )
paddle.diag_embed(Tensor([2, 3, 6],"float64"), )
paddle.diagflat(x=Tensor([3, 2, 2, 1, 2, 4, 2, 2],"float64"), offset=2, )
paddle.diagflat(Tensor([10, 10],"float64"), )
paddle.diagflat(Tensor([10, 10],"float64"), offset=1, )
paddle.diagonal(x=Tensor([6, 6, 6, 6],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal_scatter(Tensor([10, 10],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"int16"), Tensor([10],"int16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"int32"), Tensor([10],"int32"), offset=0, axis1=0, axis2=1, )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=-2, )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=2, )
paddle.digamma(Tensor([8, 3, 32, 32],"float32"), )
paddle.digamma(Tensor([8, 3, 32, 32],"float64"), )
paddle.digamma(x=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 8, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 4, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([4, 10],"float64"), )
paddle.divide(Tensor([128, 93431],"float32"), Tensor([1, 93431],"float32"), )
paddle.divide(x=Tensor([187679, 3],"float32"), y=Tensor([3],"float32"), )
paddle.divide(Tensor([512, 995],"float32"), Tensor([1, 995],"float32"), )
paddle.dot(x=Tensor([6],"float32"), y=Tensor([6],"float32"), )
paddle.dot(x=Tensor([6],"float64"), y=Tensor([6],"float64"), )
paddle.dot(x=Tensor([6],"int32"), y=Tensor([6],"int32"), )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list[-1,], )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list[2,4,], )
