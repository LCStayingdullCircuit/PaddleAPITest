paddle.index_add(Tensor([100, 100, 25],"float32"), Tensor([20],"int32"), 2, Tensor([100, 100, 20],"float32"), )
paddle.index_add(Tensor([100, 100, 5],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5],"float32"), )
paddle.index_add(Tensor([100, 5],"float32"), Tensor([20],"int32"), 0, Tensor([20, 5],"float32"), )
paddle.index_fill(Tensor([10, 15, 10],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([10, 15, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 15, 10],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_sample(Tensor([1865664, 100],"float32"), Tensor([1865664, 1],"int64"), )
paddle.index_sample(Tensor([5135296, 20],"float32"), Tensor([5135296, 1],"int64"), )
paddle.index_sample(Tensor([932832, 100],"float32"), Tensor([932832, 1],"int64"), )
paddle.index_select(Tensor([64, 3060, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([16, 12096, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([16, 11109, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.inner(Tensor([20, 50],"complex128"), Tensor([50],"complex128"), )
paddle.inner(Tensor([20, 50],"float64"), Tensor([50],"float64"), )
paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.is_complex(Tensor([100352, 8192],"float32"), )
paddle.is_complex(Tensor([8192, 100352],"float32"), )
paddle.is_complex(Tensor([8192, 57344],"float32"), )
paddle.is_empty(x=Tensor([4, 32, 32],"float32"), )
paddle.is_empty(Tensor([3, 5],"float32"), )
paddle.is_empty(Tensor([2, 3],"float32"), )
paddle.isclose(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.isclose(x=Tensor([6],"float64"), y=Tensor([6],"float64"), )
paddle.isfinite(Tensor([4, 280, 376, 25, 3],"float32"), )
paddle.isfinite(Tensor([4, 94, 311],"float32"), )
paddle.isfinite(Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 256],"float32"), False, False, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 64],"float64"), Tensor([4, 256],"float64"), False, False, )
paddle.isinf(Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.isinf(Tensor([14, 64, 16],"float32"), )
paddle.isinf(Tensor([14, 7, 99],"float32"), )
paddle.isnan(Tensor([4, 64, 320, 320],"float16"), )
paddle.isnan(Tensor([4, 64, 320, 320],"float32"), )
paddle.isnan(Tensor([4864, 4864],"float32"), )
paddle.isneginf(Tensor([11, 17, 10],"int16"), )
paddle.isneginf(Tensor([11, 17, 10],"int32"), )
paddle.isneginf(Tensor([11, 17],"float32"), )
paddle.isposinf(Tensor([11, 17, 10],"int16"), )
paddle.isposinf(Tensor([11, 17, 10],"int32"), )
paddle.isposinf(Tensor([11, 17],"float32"), )
paddle.isreal(Tensor([64, 32],"bfloat16"), )
paddle.isreal(Tensor([64, 32],"bool"), )
paddle.isreal(Tensor([64, 32],"float16"), )
paddle.kron(Tensor([64, 64],"float32"), Tensor([76, 76],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), )
paddle.kthvalue(Tensor([30, 200, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 200, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 200, 40],"float32"), k=2, )
paddle.lcm(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.lcm(Tensor([6],"int32"), Tensor([1],"int32"), )
paddle.lcm(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.ldexp(Tensor([247],"float64"), Tensor([247],"int32"), )
paddle.ldexp(Tensor([210],"int32"), Tensor([210],"int32"), )
paddle.ldexp(Tensor([209],"int64"), Tensor([209],"int32"), )
paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 28],"float32"), 0.36, )
paddle.less(Tensor([10, 1024],"float32"), Tensor([10, 1024],"float32"), )
paddle.less(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.less_equal(Tensor([513],"float64"), Tensor([],"float64"), )
paddle.less_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.less_than(Tensor([8, 1, 128, 128],"float32"), Tensor([8, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([1, 128, 256],"float32"), Tensor([1, 128, 256],"float32"), )
paddle.less_than(Tensor([1, 128, 256],"int64"), Tensor([1, 128, 256],"int64"), )
paddle.lgamma(Tensor([100, 100],"float64"), )
paddle.lgamma(Tensor([10, 10, 10, 2],"float64"), )
paddle.lgamma(Tensor([1948, 1],"float32"), )
paddle.linalg.cholesky(Tensor([3, 3],"float64"), )
paddle.linalg.cholesky(Tensor([2, 2],"float32"), )
paddle.linalg.cholesky(Tensor([2, 2],"float64"), )
paddle.linalg.cond(x=Tensor([6, 2, 4, 3, 4],"float64"), )
paddle.linalg.cond(x=Tensor([4, 2, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.corrcoef(Tensor([4, 5],"float32"), )
paddle.linalg.corrcoef(Tensor([4, 5],"float32"), rowvar=False, )
paddle.linalg.corrcoef(Tensor([4, 5],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.det(Tensor([2, 1, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([3, 3, 5, 5],"complex128"), )
paddle.linalg.det(Tensor([3, 3, 5, 5],"float32"), )
paddle.linalg.inv(x=Tensor([5, 3, 4, 4],"float64"), )
paddle.linalg.inv(Tensor([5, 5],"float64"), )
paddle.linalg.inv(x=Tensor([4, 4],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 5, 5],"float64"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float32"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_rank(Tensor([2, 0, 6, 6],"float32"), )
paddle.linalg.matrix_rank(Tensor([2, 0, 6, 6],"float32"), atol=0.2, rtol=0.2, )
paddle.linalg.matrix_transpose(Tensor([2, 3, 4],"float32"), )
paddle.linalg.multi_dot(list[Tensor([4, 4],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.norm(Tensor([727173],"float32"), p=2, )
paddle.linalg.norm(Tensor([50, 50, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([8550, 1, 4],"float32"), p=1.0, axis=-1, )
paddle.linalg.pinv(Tensor([2, 200, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(x=Tensor([2, 4, 40],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 100, 12],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 100, 8],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 100, 6],"float64"), )
paddle.linalg.slogdet(Tensor([3, 3, 5, 5],"complex64"), )
paddle.linalg.slogdet(Tensor([3, 3, 5, 5],"float32"), )
paddle.linalg.slogdet(x=Tensor([14, 14],"float32"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14],"float64"), )
paddle.linalg.svdvals(Tensor([40, 40],"float64"), )
paddle.linalg.svdvals(Tensor([10, 3, 6],"float64"), )
paddle.linalg.svdvals(Tensor([10, 12],"float32"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 1],"float64"), )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.log(Tensor([64, 80, 6625],"float32"), )
paddle.log(Tensor([64, 40, 6625],"float32"), )
paddle.log(Tensor([64, 25, 6626],"float32"), )
paddle.log10(Tensor([10, 20, 1],"float32"), )
paddle.log10(x=Tensor([2, 3, 2, 2],"float64"), )
paddle.log10(x=Tensor([2, 2],"float64"), )
paddle.log1p(Tensor([4, 157920, 3],"float32"), )
paddle.log1p(Tensor([50000, 5, 5],"float64"), )
paddle.log1p(Tensor([10, 200, 300],"float32"), )
paddle.log2(Tensor([10, 20, 1],"float32"), )
paddle.log2(Tensor([10, 12],"float32"), )
paddle.log2(Tensor([10, 12],"float64"), )
paddle.logaddexp(Tensor([10, 200, 300],"float32"), Tensor([10, 200, 300],"float32"), )
paddle.logaddexp(Tensor([10, 200, 300],"int32"), Tensor([10, 200, 300],"int32"), )
paddle.logaddexp(Tensor([10, 200, 300],"int64"), Tensor([10, 200, 300],"int64"), )
paddle.logcumsumexp(Tensor([10, 10, 10],"float32"), )
paddle.logcumsumexp(Tensor([10, 10, 10],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([10, 10, 10],"float32"), axis=0, )
paddle.logical_and(Tensor([53, 369303],"bool"), Tensor([53, 369303],"bool"), )
paddle.logical_and(Tensor([55, 349866],"bool"), Tensor([55, 349866],"bool"), )
paddle.logical_and(Tensor([49, 369303],"bool"), Tensor([49, 369303],"bool"), )
paddle.logical_not(Tensor([225792, 80],"bool"), )
paddle.logical_not(Tensor([220416, 80],"bool"), )
paddle.logical_not(Tensor([215040, 80],"bool"), )
paddle.logical_or(Tensor([640, 640],"bool"), Tensor([640, 640],"bool"), )
paddle.logical_or(Tensor([34000],"bool"), Tensor([34000],"bool"), )
paddle.logical_or(Tensor([27540],"bool"), Tensor([27540],"bool"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logit(Tensor([10, 20, 1],"float32"), 0.001, )
paddle.logit(Tensor([120],"float32"), 1e-08, )
paddle.logit(x=Tensor([4, 3, 2, 5],"float64"), eps=0.2, )
paddle.logspace(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"int32"), Tensor([1],"float32"), dtype="float32", )
paddle.logspace(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"int32"), Tensor([],"float32"), )
paddle.logspace(0, 10, 200, 2, dtype="int32", )
paddle.logsumexp(Tensor([1024, 384],"float32"), axis=1, )
paddle.logsumexp(Tensor([30, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.masked_fill(Tensor([30, 60, 30],"int32"), Tensor([30, 60, 30],"bool"), 0, )
paddle.masked_fill(Tensor([20, 60, 20],"int32"), Tensor([20, 60, 20],"bool"), 0, )
paddle.masked_fill(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([1],"float32"), )
paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_select(Tensor([16, 12096, 68],"float32"), Tensor([16, 12096, 68],"bool"), )
paddle.masked_select(Tensor([16, 11109, 68],"float32"), Tensor([16, 11109, 68],"bool"), )
paddle.masked_select(Tensor([16, 10164, 68],"float32"), Tensor([16, 10164, 68],"bool"), )
paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 32, 4096, 128],"float32"), )
paddle.matmul(Tensor([10, 8, 499, 3600],"float32"), Tensor([10, 8, 3600, 64],"float32"), )
paddle.matmul(Tensor([512, 4, 256, 256],"float32"), Tensor([512, 4, 256, 36],"float32"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"float16"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"float32"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"float64"), )
paddle.max(Tensor([512, 50, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([416, 50, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([8, 1024, 1024],"float32"), axis=-1, keepdim=True, )
paddle.maximum(Tensor([16121, 811],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([14877, 420],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([11585, 418],"float32"), Tensor([1],"float32"), )
paddle.mean(Tensor([8162, 8, 1280],"bfloat16"), axis=1, )
paddle.mean(Tensor([7710, 8, 1280],"bfloat16"), axis=1, )
paddle.mean(Tensor([7573, 8, 1280],"bfloat16"), axis=1, )
paddle.median(Tensor([384],"float32"), )
paddle.median(Tensor([384],"int64"), )
paddle.median(Tensor([2, 100],"float32"), axis=1, mode="min", )
paddle.meshgrid(Tensor([4098],"float32"), Tensor([4098],"float32"), )
paddle.meshgrid(list[Tensor([280],"float32"),Tensor([376],"float32"),Tensor([25],"float32"),], )
paddle.meshgrid(Tensor([336],"float32"), Tensor([336],"float32"), )
paddle.min(Tensor([64, 1, 28, 28],"float32"), )
paddle.min(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.minimum(Tensor([16, 1, 2],"float32"), Tensor([451143, 2],"float32"), )
paddle.minimum(Tensor([13, 1, 2],"float32"), Tensor([451143, 2],"float32"), )
paddle.minimum(Tensor([9, 1, 2],"float32"), Tensor([451143, 2],"float32"), )
paddle.mm(Tensor([4096, 4, 144, 144],"float32"), Tensor([4096, 4, 144, 32],"float32"), )
paddle.mm(Tensor([3840, 4, 144, 144],"float32"), Tensor([3840, 4, 144, 32],"float32"), )
paddle.mm(Tensor([2048, 6, 144, 144],"float32"), Tensor([2048, 6, 144, 32],"float32"), )
paddle.mod(Tensor([10, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.mod(Tensor([6, 2, 4, 5],"int32"), Tensor([6, 2, 4, 5],"int32"), )
paddle.mod(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.mode(Tensor([2, 10, 10],"float64"), -1, )
paddle.mode(Tensor([2, 10, 10],"float64"), -1, keepdim=True, )
