paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 3, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 3, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="none", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 3, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.normalize(Tensor([2331, 512],"float32"), )
paddle.nn.functional.normalize(Tensor([2081, 512],"float32"), )
paddle.nn.functional.normalize(Tensor([2009, 512],"float32"), )
paddle.nn.functional.npair_loss(Tensor([18, 6],"float32"), positive=Tensor([18, 6],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.pad(Tensor([8162, 8, 1280],"bfloat16"), list[0,6,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([7710, 8, 1280],"bfloat16"), list[0,2,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([7573, 8, 1280],"bfloat16"), list[0,3,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 100],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 128, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 64, 64],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 128, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nn.functional.prelu(Tensor([128, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 256, 28, 28],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.relu(Tensor([640, 64, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 128, 480, 480],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 256, 352, 352],"float32"), )
paddle.nn.functional.relu6(Tensor([128, 192, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([256, 96, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([128, 144, 112, 112],"float32"), )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([3, 3, 3],"float64"), 1.0507009873554805, 0, None, )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([8],"int32"), maxlen=Tensor([],"int64"), dtype="float32", )
paddle.nn.functional.sequence_mask(Tensor([8],"int32"), maxlen=4, dtype="float32", )
paddle.nn.functional.sigmoid(Tensor([8, 32, 400, 400],"float32"), )
paddle.nn.functional.sigmoid(Tensor([372, 304, 336],"float32"), )
paddle.nn.functional.sigmoid(Tensor([364, 304, 336],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.silu(Tensor([128, 128, 128, 128],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 256, 64, 64],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 64, 128, 128],"float32"), None, )
paddle.nn.functional.smooth_l1_loss(Tensor([7, 50000],"float32"), Tensor([7, 50000],"float32"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([64, 187, 8],"float32"), Tensor([64, 187, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([1914, 50],"float32"), Tensor([1914, 50],"float32"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), "sum", None, )
paddle.nn.functional.softmax(Tensor([4096, 4, 144, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([3840, 4, 144, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([60, 2304, 2304],"float32"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 64],"float32"), Tensor([2, 16, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 64],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 64],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softplus(Tensor([13, 1007, 64],"float32"), )
paddle.nn.functional.softplus(Tensor([13, 10, 64],"float32"), )
paddle.nn.functional.softplus(Tensor([14, 7, 64],"float32"), )
paddle.nn.functional.softshrink(Tensor([32, 15, 8, 8, 32, 2],"float32"), threshold=0.01, )
paddle.nn.functional.softshrink(Tensor([3, 3, 3],"float64"), 0, None, )
paddle.nn.functional.softshrink(Tensor([3, 3, 3],"float64"), 5, None, )
paddle.nn.functional.softsign(Tensor([300, 4096],"float32"), )
paddle.nn.functional.softsign(Tensor([32, 128],"float32"), )
paddle.nn.functional.softsign(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 100],"float16"), Tensor([8, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 100],"float32"), Tensor([8, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float64"), label=Tensor([3, 2, 1, 2],"float64"), )
paddle.nn.functional.swish(Tensor([128, 96, 112, 112],"float32"), )
paddle.nn.functional.swish(Tensor([16, 64, 384, 384],"float32"), )
paddle.nn.functional.swish(Tensor([16, 64, 368, 368],"float32"), )
paddle.nn.functional.tanh(Tensor([282600, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([93401, 90],"float32"), None, )
paddle.nn.functional.tanh(Tensor([147015, 50],"float32"), None, )
paddle.nn.functional.tanhshrink(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.tanhshrink(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.tanhshrink(Tensor([4],"float32"), None, )
paddle.nn.functional.temporal_shift(Tensor([240, 256, 56, 56],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 56, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([240, 512, 28, 28],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 3],"float32"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 3],"float64"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 3, 3],"float32"), )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.unfold(Tensor([64, 3, 224, 224],"float32"), 16, 16, )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 64],"float32"), 3, 1, 1, tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 64],"float32"), 3, 1, tuple(1,1,), 1, )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"int64"), Tensor([4],"int32"), )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 224],"float64"), list[2,2,2,2,], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nonzero(Tensor([512, 80, 28, 28],"float32"), )
paddle.nonzero(Tensor([511, 80, 28, 28],"float32"), )
paddle.nonzero(Tensor([510, 80, 28, 28],"float32"), )
paddle.not_equal(Tensor([4224],"int64"), Tensor([4224],"int64"), )
paddle.not_equal(Tensor([2944],"int64"), Tensor([2944],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.numel(Tensor([65536000],"float32"), )
paddle.numel(Tensor([64225280],"float32"), )
paddle.numel(Tensor([38895616],"float32"), )
paddle.ones(list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], )
paddle.ones(shape=Tensor([2],"int32"), )
paddle.ones(shape=Tensor([2],"int32"), dtype="int32", )
paddle.ones_like(Tensor([176, 392, 392],"float32"), )
paddle.ones_like(Tensor([160, 392, 392],"float32"), )
paddle.ones_like(Tensor([144, 392, 392],"float32"), )
paddle.outer(Tensor([32768],"float32"), Tensor([32],"float32"), )
paddle.outer(Tensor([8192],"float32"), Tensor([4],"float32"), )
paddle.outer(Tensor([8192],"float32"), Tensor([2],"float32"), )
paddle.pdist(Tensor([50, 20],"float64"), 2.0, )
paddle.pdist(Tensor([10, 20],"float32"), 0, )
paddle.pdist(Tensor([10, 20],"float32"), 1.0, )
paddle.polar(Tensor([1, 8192, 64],"float32"), Tensor([1, 8192, 64],"float32"), )
paddle.polar(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.polar(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.polygamma(Tensor([10, 20, 1],"float32"), 1, )
paddle.polygamma(Tensor([2, 2, 6],"float64"), 2, )
paddle.polygamma(Tensor([2, 6],"float64"), 1, )
paddle.positive(Tensor([10, 1024],"float32"), )
paddle.positive(Tensor([2, 3, 4, 5],"float16"), )
paddle.positive(Tensor([2, 3, 4, 5],"float32"), )
paddle.pow(Tensor([4, 81, 94, 311],"float32"), 2.0, )
paddle.pow(Tensor([1024, 1024, 8],"float32"), 2, )
paddle.pow(Tensor([1024, 1024, 8],"float64"), 2, )
paddle.prod(Tensor([16, 1024],"float32"), -1, )
paddle.prod(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
paddle.quantile(Tensor([1124, 32],"float32"), 0.30000000000000004, )
paddle.quantile(Tensor([512, 32],"float32"), 0.30000000000000004, )
paddle.quantile(Tensor([3, 6, 3, 4, 2, 5],"float64"), q=0.5, )
paddle.rad2deg(Tensor([8, 16, 32],"float32"), )
paddle.rad2deg(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.rad2deg(x=Tensor([4, 4, 4],"float64"), )
paddle.real(Tensor([50, 8, 39, 14, 14],"complex64"), )
paddle.real(x=Tensor([50, 8, 39, 14, 14],"complex64"), )
paddle.real(Tensor([10, 10, 10, 20],"complex64"), )
paddle.reciprocal(Tensor([8, 1, 960, 960],"float32"), )
paddle.reciprocal(Tensor([16, 1, 640, 640],"float32"), )
paddle.reciprocal(Tensor([4, 1, 960, 960],"float32"), )
paddle.reduce_as(Tensor([30, 200, 40],"float32"), Tensor([200, 40],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"int32"), Tensor([1, 2, 3, 4, 5],"int32"), )
paddle.renorm(Tensor([10, 20, 1],"float32"), 1.0, -1, 2.05, )
paddle.renorm(x=Tensor([3, 2, 3],"float32"), p=1, axis=0, max_norm=5, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=1, axis=0, max_norm=5, )
paddle.repeat_interleave(Tensor([5, 1, 768, 768],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([14, 1, 384, 384],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([1, 1500, 1280],"float32"), 5, axis=0, )
paddle.reverse(Tensor([4, 12, 32],"float64"), axis=1, )
paddle.reverse(Tensor([12, 4, 16],"float64"), axis=list[0,], )
paddle.reverse(Tensor([12, 4, 8],"float64"), axis=0, )
paddle.roll(Tensor([128, 56, 56, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 56, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([64, 96, 96, 128],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.round(Tensor([128, 128],"float32"), )
paddle.round(Tensor([16, 256],"float64"), )
paddle.round(x=Tensor([3, 3, 3],"float32"), )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.rsqrt(Tensor([10000, 2, 3],"float32"), )
paddle.rsqrt(Tensor([10000, 2, 3],"float64"), )
paddle.rsqrt(Tensor([13, 1007, 1],"float32"), )
paddle.scale(Tensor([4, 256, 256, 256],"float16"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 256, 256, 256],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 256, 256, 256],"float32"), scale=1.1111111111111112, )
paddle.scatter(Tensor([262144, 64],"float32"), Tensor([21955],"int32"), Tensor([21955, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 64],"float32"), Tensor([20524],"int32"), Tensor([20524, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 64],"float32"), Tensor([19780],"int32"), Tensor([19780, 64],"float32"), overwrite=True, )
paddle.scatter_nd(Tensor([3, 2],"int64"), Tensor([3, 9, 10],"float32"), list[3,5,9,10,], )
paddle.scatter_nd(Tensor([38, 1],"int64"), Tensor([38],"float32"), list[128,], )
paddle.scatter_nd(Tensor([32, 1],"int64"), Tensor([32],"int64"), list[128,], )
paddle.scatter_nd_add(Tensor([1, 8192, 7168],"bfloat16"), Tensor([5953, 2],"int64"), Tensor([5953, 7168],"bfloat16"), )
paddle.scatter_nd_add(Tensor([1, 8192, 7168],"bfloat16"), Tensor([5876, 2],"int64"), Tensor([5876, 7168],"bfloat16"), )
paddle.scatter_nd_add(Tensor([1, 8192, 7168],"bfloat16"), Tensor([5859, 2],"int64"), Tensor([5859, 7168],"bfloat16"), )
paddle.searchsorted(Tensor([1024],"float32"), Tensor([512],"float32"), )
paddle.searchsorted(Tensor([1024],"float64"), Tensor([512],"float64"), )
paddle.searchsorted(Tensor([1024],"int32"), Tensor([512],"int32"), )
paddle.select_scatter(Tensor([2, 3, 4, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4],"float32"), Tensor([2, 4],"float32"), 1, 1, )
paddle.sgn(Tensor([12, 20, 2],"float32"), )
paddle.sgn(Tensor([12, 20, 2],"float64"), )
paddle.sgn(Tensor([2, 4],"complex128"), )
paddle.shape(Tensor([4, 1600, 376, 280],"float32"), )
paddle.shape(Tensor([4, 128, 256, 256],"float16"), )
paddle.shape(Tensor([4, 128, 256, 256],"float32"), )
paddle.shard_index(input=Tensor([4, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, )
paddle.shard_index(input=Tensor([4, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
paddle.shard_index(input=Tensor([4, 1],"int64"), index_num=13, nshards=3, shard_id=0, )
paddle.sign(Tensor([32, 32, 128],"float32"), )
paddle.sign(Tensor([64, 1, 28, 28],"float32"), )
paddle.sign(Tensor([7, 1, 384],"int64"), )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), 512, 99, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([257, 471],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.stft(Tensor([16, 25500],"float32"), 2048, 240, 1200, window=Tensor([1200],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([16, 25500],"float32"), 1024, 120, 600, window=Tensor([600],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([16, 25500],"float32"), 512, 50, 240, window=Tensor([240],"float32"), center=True, pad_mode="reflect", )
