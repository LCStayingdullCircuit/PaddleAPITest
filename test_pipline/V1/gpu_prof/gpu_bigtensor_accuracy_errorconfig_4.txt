paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 498, 498],"float32"), Tensor([30, 8, 498, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 477, 477],"float32"), Tensor([30, 8, 477, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 457, 457],"float32"), Tensor([30, 8, 457, 64],"float32"), )
paddle.equal(Tensor([4148, 30],"int64"), Tensor([4148, 30],"int64"), )
paddle.equal(Tensor([512, 30],"int64"), 0, )
paddle.equal(Tensor([416, 30],"int64"), 0, )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([16, 16],"float32"), Tensor([16, 16],"float32"), )
paddle.equal_all(Tensor([128],"float32"), Tensor([128],"float32"), )
paddle.erf(Tensor([4, 2, 3, 5, 4],"float64"), )
paddle.erf(Tensor([11, 17],"float64"), )
paddle.erf(Tensor([4, 2, 3, 5],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3, 5, 4],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3, 5],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3],"float64"), )
paddle.exp(Tensor([13, 64, 1007, 16],"float32"), )
paddle.exp(Tensor([8, 1, 960, 960],"float32"), )
paddle.exp(Tensor([16, 1, 640, 640],"float32"), )
paddle.expand(Tensor([2, 2, 1, 8, 128, 96],"float16"), list[2,2,1,8,128,96,], )
paddle.expand(Tensor([2, 2, 1, 8, 128, 96],"float16"), list[2,2,2,8,128,96,], )
paddle.expand(Tensor([16, 32, 128],"float32"), list[8,16,32,128,], )
paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 28, 28],"float16"), )
paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 28, 28],"float32"), )
paddle.expand_as(Tensor([511, 80, 1, 1],"float32"), Tensor([511, 80, 28, 28],"float32"), )
paddle.expm1(Tensor([8, 16, 32],"complex128"), )
paddle.expm1(Tensor([8, 16, 32],"complex64"), )
paddle.expm1(Tensor([8, 16, 32],"float16"), )
paddle.eye(Tensor([],"int64"), Tensor([],"int64"), )
paddle.eye(num_rows=Tensor([1],"float64"), num_columns=Tensor([1],"float64"), dtype="float32", )
paddle.eye(1, dtype="float32", )
paddle.fft.fft(x=Tensor([7],"complex128"), )
paddle.fft.fft(x=Tensor([7],"complex128"), axis=0, )
paddle.fft.fft(x=Tensor([7],"complex128"), n=1, )
paddle.fft.fft2(x=Tensor([3, 2, 4, 2],"complex128"), )
paddle.fft.fft2(x=Tensor([3, 3, 2, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.fft2(x=Tensor([2, 2, 4],"complex128"), )
paddle.fft.fftfreq(n=10, d=0.1, )
paddle.fft.fftfreq(n=14, d=0.03703703731298447, )
paddle.fft.fftfreq(n=39, d=0.5, )
paddle.fft.fftn(Tensor([8, 32, 481, 481],"float32"), axes=list[2,3,], )
paddle.fft.fftn(x=Tensor([50, 8, 39, 14, 14],"float32"), axes=list[-3,-2,-1,], )
paddle.fft.fftn(Tensor([39, 7, 32],"float32"), )
paddle.fft.fftshift(x=Tensor([16, 96, 20, 11],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 64, 19, 10],"complex64"), axes=list[-2,], )
paddle.fft.fftshift(x=Tensor([16, 128, 10, 6],"complex64"), axes=list[-2,], )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), n=2, )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), n=2, axis=1, )
paddle.fft.hfft2(x=Tensor([3, 3, 3, 3],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 4],"complex128"), )
paddle.fft.hfftn(Tensor([3, 3, 3, 3],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.ifft(x=Tensor([7],"complex128"), )
paddle.fft.ifft(x=Tensor([7],"complex128"), axis=0, )
paddle.fft.ifft(x=Tensor([7],"complex128"), n=1, )
paddle.fft.ifft2(x=Tensor([3, 2, 4, 2],"complex128"), )
paddle.fft.ifft2(x=Tensor([3, 3, 2, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([2, 2, 4],"complex128"), )
paddle.fft.ifftn(Tensor([8, 32, 481, 481],"complex64"), axes=list[2,3,], )
paddle.fft.ifftn(x=Tensor([50, 8, 39, 14, 14],"complex64"), s=tuple(39,14,14,), )
paddle.fft.ifftn(x=Tensor([4, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=tuple(0,3,), )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), n=2, )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), n=2, axis=1, )
paddle.fft.ihfft2(x=Tensor([4, 3, 3, 3],"float64"), )
paddle.fft.ihfft2(x=Tensor([3, 4, 5],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 3, 3],"float64"), s=tuple(1,2,), )
paddle.fft.ihfftn(x=Tensor([4, 3, 5, 2],"float64"), )
paddle.fft.ihfftn(Tensor([4, 3, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([3, 4, 5],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfft(Tensor([20, 64, 1051],"complex64"), n=2101, )
paddle.fft.irfft(Tensor([20, 64, 1001],"complex64"), n=2001, )
paddle.fft.irfft(Tensor([4, 32, 32, 16],"complex64"), n=64, axis=-1, norm="forward", )
paddle.fft.irfft2(Tensor([32, 32, 250, 126],"complex64"), s=tuple(250,250,), )
paddle.fft.irfft2(Tensor([8, 32, 250, 126],"complex64"), s=tuple(250,250,), )
paddle.fft.irfft2(Tensor([32, 15, 8, 256],"complex64"), s=tuple(15,15,), axes=tuple(1,2,), norm="ortho", )
paddle.fft.irfftn(Tensor([32, 32, 250, 126],"complex64"), tuple(250,250,), tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([8, 32, 250, 126],"complex64"), tuple(250,250,), tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([32, 15, 8, 256],"complex64"), tuple(15,15,), tuple(1,2,), "ortho", None, )
paddle.fft.rfft(Tensor([20, 64, 2101],"float32"), )
paddle.fft.rfft(Tensor([20, 64, 2001],"float32"), )
paddle.fft.rfft(Tensor([4, 32, 32, 64],"float32"), axis=-1, norm="forward", )
paddle.fft.rfft2(Tensor([32, 32, 250, 250],"float32"), )
paddle.fft.rfft2(Tensor([8, 32, 250, 250],"float32"), )
paddle.fft.rfft2(x=Tensor([32, 15, 15, 256],"float32"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.rfftfreq(n=5, d=0.3, )
paddle.fft.rfftfreq(n=8, d=0.3, )
paddle.fft.rfftfreq(n=8, d=1, )
paddle.fft.rfftn(Tensor([32, 32, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([8, 32, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([32, 15, 15, 256],"float32"), None, tuple(1,2,), "ortho", None, )
paddle.flatten(Tensor([4096, 256, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([512, 50, 7, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([416, 50, 7, 256],"float32"), start_axis=2, )
paddle.flip(Tensor([64, 3, 112, 112],"float32"), axis=-1, )
paddle.flip(Tensor([52, 3, 112, 112],"float32"), axis=-1, )
paddle.flip(Tensor([3, 8, 224, 224],"float32"), axis=list[3,], )
paddle.floor(Tensor([4, 157920],"float32"), )
paddle.floor(Tensor([100000, 2, 3],"float32"), )
paddle.floor(x=Tensor([100, 4, 38, 38],"float32"), )
paddle.floor_divide(Tensor([10, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.floor_divide(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.floor_divide(Tensor([128],"int64"), Tensor([],"int64"), )
paddle.floor_mod(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.floor_mod(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.floor_mod(Tensor([],"float32"), Tensor([],"float32"), )
paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([15],"float32"), )
paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([15],"float32"), )
paddle.frac(Tensor([10, 20, 1],"float32"), )
paddle.frac(Tensor([2, 3],"float32"), )
paddle.frac(Tensor([2, 3],"float64"), )
paddle.full(shape=Tensor([5],"int64"), fill_value=-2, )
paddle.full(list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], 0.5, )
paddle.full(shape=Tensor([2],"int32"), fill_value=Tensor([1],"float32"), )
paddle.full_like(Tensor([1, 1, 2048, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([6, 256000],"float32"), 0.0, )
paddle.full_like(Tensor([1, 300, 4096],"float32"), 1, )
paddle.gammainc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammainc(Tensor([3, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([3, 40],"float32"), Tensor([3, 40],"float32"), )
paddle.gather(Tensor([2048, 2048, 7, 7],"float32"), Tensor([512, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 7, 7],"float32"), Tensor([496, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 7, 7],"float32"), Tensor([482, 1],"int64"), )
paddle.gather_nd(Tensor([20, 41344, 128],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([1, 8192, 7168],"bfloat16"), Tensor([8162, 2],"int64"), )
paddle.gather_nd(Tensor([1, 8192, 7168],"bfloat16"), Tensor([7780, 2],"int64"), )
paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.gcd(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.geometric.segment_max(Tensor([40, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_sum(Tensor([40, 20],"float32"), Tensor([40],"int32"), )
paddle.geometric.segment_sum(Tensor([30, 15],"float16"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([30, 15],"float32"), Tensor([30],"int64"), )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.greater_equal(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), )
paddle.greater_equal(Tensor([8, 1024, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.greater_than(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.heaviside(Tensor([300, 2048],"float32"), Tensor([300, 2048],"float32"), )
paddle.heaviside(Tensor([300, 2048],"float32"), Tensor([2048],"float32"), )
paddle.heaviside(Tensor([300, 2048],"float32"), Tensor([1],"float32"), )
paddle.histogram(input=Tensor([4, 4],"int64"), )
paddle.histogram_bin_edges(Tensor([5, 20],"float32"), bins=10, min=0, max=1, )
paddle.histogram_bin_edges(Tensor([5, 20],"float32"), bins=10, min=0.2, max=0.9, )
paddle.histogram_bin_edges(Tensor([5, 20],"float32"), bins=10, min=1, max=1, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=5, weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list[-1,], )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list[2,4,], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.hypot(Tensor([10, 20],"float32"), Tensor([10, 20],"float32"), )
paddle.hypot(Tensor([10, 10],"float32"), Tensor([10, 1],"float32"), )
paddle.hypot(Tensor([6],"float32"), Tensor([1],"float32"), )
paddle.i0(Tensor([513],"float64"), )
paddle.i0(Tensor([10, 20, 1],"float32"), )
paddle.i0(Tensor([9],"float32"), )
paddle.i0e(Tensor([9],"float32"), )
paddle.i0e(Tensor([9],"float64"), )
paddle.i0e(Tensor([6],"float64"), )
paddle.i1(Tensor([9],"float32"), )
paddle.i1(Tensor([9],"float64"), )
paddle.i1(Tensor([6],"float64"), )
paddle.i1e(Tensor([9],"float32"), )
paddle.i1e(Tensor([9],"float64"), )
paddle.i1e(Tensor([6],"float64"), )
paddle.imag(Tensor([10, 10, 10, 20],"complex128"), )
paddle.imag(Tensor([2, 20, 2, 3],"complex128"), )
paddle.imag(Tensor([2, 20, 2, 3],"complex64"), )
paddle.increment(Tensor([1],"float32"), value=2.0, )
paddle.increment(Tensor([1],"int64"), )
paddle.increment(Tensor([],"float32"), 1.0, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([40, 50],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([50, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([40, 50],"float32"), None, True, True, )
paddle.incubate.nn.functional.swiglu(Tensor([111616, 7168],"bfloat16"), )
paddle.incubate.nn.functional.swiglu(Tensor([108544, 7168],"bfloat16"), )
paddle.incubate.nn.functional.swiglu(Tensor([106496, 7168],"bfloat16"), )
paddle.incubate.segment_max(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_mean(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_min(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_sum(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
