paddle.signbit(Tensor([11, 17, 10],"int16"), )
paddle.signbit(Tensor([11, 17, 10],"int32"), )
paddle.signbit(Tensor([12, 20, 2],"float32"), )
paddle.sin(Tensor([128512, 100],"float32"), )
paddle.sin(Tensor([50000, 200],"float32"), )
paddle.sin(Tensor([68608, 100],"float32"), )
paddle.sinc(Tensor([16, 64],"float32"), )
paddle.sinc(Tensor([16, 64],"float64"), )
paddle.sinc(Tensor([6],"float32"), )
paddle.sinh(Tensor([8, 16, 32],"complex128"), )
paddle.sinh(Tensor([8, 16, 32],"complex64"), )
paddle.sinh(Tensor([8, 16, 32],"float32"), )
paddle.slice(Tensor([65344, 1280],"bfloat16"), axes=list[0,], starts=list[0,], ends=list[8168,], )
paddle.slice(Tensor([65344, 1280],"bfloat16"), axes=list[0,], starts=list[16336,], ends=list[24504,], )
paddle.slice(Tensor([65344, 1280],"bfloat16"), axes=list[0,], starts=list[24504,], ends=list[32672,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float32"), Tensor([8, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float64"), Tensor([8, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float32"), Tensor([8, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.split(Tensor([7168, 111616],"float8_e4m3fn"), num_or_sections=list[55296,53760,0,512,512,1536,], axis=-1, )
paddle.split(Tensor([7168, 108544],"float8_e4m3fn"), num_or_sections=list[512,0,48640,59392,0,0,], axis=-1, )
paddle.split(Tensor([7168, 106496],"float8_e4m3fn"), num_or_sections=list[47104,49152,0,512,3584,6144,], axis=-1, )
paddle.sqrt(Tensor([64, 3, 256, 256],"float32"), )
paddle.sqrt(Tensor([128, 93431],"float32"), )
paddle.sqrt(Tensor([4, 15, 3, 256, 256],"float32"), )
paddle.square(Tensor([128, 93431],"float32"), )
paddle.square(Tensor([104, 93431],"float32"), )
paddle.square(Tensor([3548, 12, 170, 1],"float32"), )
paddle.squeeze(Tensor([421120, 25, 4],"float32"), axis=-1, )
paddle.squeeze(Tensor([8, 512, 1, 100, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([105344, 128],"float32"), )
paddle.stack(list[Tensor([7168, 7168],"bfloat16"),Tensor([7168, 7168],"bfloat16"),Tensor([7168, 7168],"bfloat16"),Tensor([7168, 7168],"bfloat16"),Tensor([7168, 7168],"bfloat16"),Tensor([7168, 7168],"bfloat16"),], axis=0, )
paddle.stack(list[Tensor([8, 32, 38367, 4],"float32"),Tensor([8, 32, 38367, 4],"float32"),Tensor([8, 32, 38367, 4],"float32"),Tensor([8, 32, 38367, 4],"float32"),Tensor([8, 32, 38367, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([8, 32, 36828, 4],"float32"),Tensor([8, 32, 36828, 4],"float32"),Tensor([8, 32, 36828, 4],"float32"),Tensor([8, 32, 36828, 4],"float32"),Tensor([8, 32, 36828, 4],"float32"),], axis=-2, )
paddle.stanh(x=Tensor([2, 3, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([2, 2],"float32"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([2, 2],"float64"), scale_a=6.42, scale_b=3.58, )
paddle.std(Tensor([32, 32],"float32"), )
paddle.std(Tensor([1, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 10],"float64"), 2, True, False, )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.subtract(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 1],"float32"), )
paddle.subtract(Tensor([64, 4, 3, 64, 128],"float32"), Tensor([64, 4, 3, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 3, 3, 64, 128],"float32"), Tensor([64, 3, 3, 64, 128],"float32"), )
paddle.sum(Tensor([6078, 32, 896],"bfloat16"), axis=1, keepdim=False, )
paddle.sum(Tensor([6036, 32, 896],"bfloat16"), axis=1, keepdim=False, )
paddle.sum(Tensor([6017, 32, 896],"bfloat16"), axis=1, keepdim=False, )
paddle.t(Tensor([512, 512],"int64"), )
paddle.t(Tensor([10, 20],"float32"), )
paddle.t(Tensor([20, 10],"float32"), )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
paddle.take(Tensor([3, 4],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take_along_axis(Tensor([8, 63, 768],"float32"), axis=1, indices=Tensor([8, 7, 768],"int64"), )
paddle.take_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 8],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 7],"int64"), axis=-1, )
paddle.tan(Tensor([8, 16, 32],"complex128"), )
paddle.tan(Tensor([8, 16, 32],"complex64"), )
paddle.tan(Tensor([8, 16, 32],"float32"), )
paddle.tanh(Tensor([64, 26, 512, 1, 40],"float32"), )
paddle.tanh(Tensor([16, 64, 25500],"float32"), )
paddle.tanh(Tensor([8, 32, 241, 241],"float32"), )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensordot(x=Tensor([4, 2, 3, 5, 4],"float64"), y=Tensor([2, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], )
paddle.tile(Tensor([16, 10, 1, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 1, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([216, 248, 1, 1, 2],"float32"), list[1,1,1,1,1,], )
paddle.tolist(Tensor([2, 5],"float32"), )
paddle.tolist(Tensor([2, 3],"int64"), )
paddle.tolist(Tensor([5],"float32"), )
paddle.topk(Tensor([53, 369303],"float32"), k=1, axis=0, )
paddle.topk(Tensor([55, 349866],"float32"), k=1, axis=0, )
paddle.topk(Tensor([49, 343728],"float32"), k=1, axis=0, )
paddle.trace(x=Tensor([3, 4],"float64"), offset=0, axis1=0, axis2=1, )
paddle.trace(x=Tensor([2, 3, 2],"float64"), offset=0, axis1=-3, axis2=-2, )
paddle.trace(x=Tensor([2, 3, 2],"float64"), offset=1, axis1=0, axis2=2, )
paddle.transpose(Tensor([6, 7168, 7168],"bfloat16"), list[0,2,1,], )
paddle.transpose(Tensor([4, 150, 512, 512],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([6, 3584, 7168],"bfloat16"), list[0,2,1,], )
paddle.trapezoid(y=Tensor([3, 3, 4],"float32"), x=None, dx=Tensor([],"float32"), axis=1, )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=-1, )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=0, )
paddle.tril(Tensor([1, 1, 2048, 2048],"bool"), )
paddle.tril(Tensor([1, 1, 2048, 2048],"float32"), )
paddle.tril(Tensor([2048, 2048],"bool"), )
paddle.tril_indices(4, 4, -1, )
paddle.tril_indices(4, 4, 2, )
paddle.tril_indices(row=10, col=10, offset=-2, )
paddle.triu(Tensor([1, 1, 4096, 4096],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 2048, 2048],"float16"), )
paddle.triu(Tensor([1, 1, 1024, 1024],"float16"), diagonal=1, )
paddle.triu_indices(4, 4, -1, )
paddle.triu_indices(4, 4, 2, )
paddle.triu_indices(row=10, col=10, offset=-2, )
paddle.trunc(input=Tensor([3, 6, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([6, 6, 6, 6],"float64"), )
paddle.trunc(Tensor([20, 20],"float32"), )
paddle.unbind(Tensor([2, 3, 8, 8],"float32"), axis=0, )
paddle.unbind(Tensor([3, 9, 5],"float32"), axis=0, )
paddle.unbind(Tensor([4, 5, 6],"float32"), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([4, 6, 16],"bool"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 16],"float16"), axis=0, shape=tuple(2,2,), )
paddle.unfold(Tensor([5, 5],"float16"), 0, 5, 1, )
paddle.unfold(Tensor([5, 5],"float32"), 0, 5, 1, )
paddle.unfold(Tensor([5, 5],"float64"), 0, 5, 1, )
paddle.unique_consecutive(Tensor([100],"float64"), )
paddle.unique_consecutive(Tensor([100],"float64"), return_inverse=True, return_counts=True, )
paddle.unique_consecutive(Tensor([100],"float64"), return_inverse=True, return_counts=True, axis=-1, )
paddle.unsqueeze(Tensor([512, 50, 256],"float32"), axis=2, )
paddle.unsqueeze(Tensor([416, 50, 256],"float32"), axis=2, )
paddle.unsqueeze(Tensor([4, 1024, 1024],"int64"), 1, )
paddle.unstack(x=Tensor([2, 32, 512],"float32"), axis=0, )
paddle.unstack(Tensor([5, 10, 15],"float32"), axis=-1, )
paddle.unstack(Tensor([5, 10, 15],"float32"), axis=-2, )
paddle.vander(Tensor([5],"complex128"), 0, False, )
paddle.vander(Tensor([5],"complex128"), 0, True, )
paddle.vander(Tensor([5],"complex128"), 1, False, )
paddle.var(Tensor([96, 96, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([384, 192, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([384, 96, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.vecdot(Tensor([3, 4, 5],"float64"), Tensor([3, 4, 5],"float64"), axis=1, )
paddle.vecdot(Tensor([2, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), axis=-1, )
paddle.vecdot(Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), axis=-1, )
paddle.view(Tensor([10, 10, 10, 20],"float32"), list[-1,], )
paddle.view(Tensor([10, 10, 10, 20],"float32"), list[10,10,10,10,-1,], )
paddle.view(Tensor([10, 10, 10, 20],"float32"), list[10,100,-1,], )
paddle.view_as(Tensor([10, 10, 10, 20],"float32"), Tensor([10, 100, 20],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 128, 200, 200],"float32"), offset=Tensor([6, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 128, 76, 136],"float32"), offset=Tensor([20, 18, 76, 136],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 128, 76, 136],"float32"), offset=Tensor([20, 18, 76, 136],"float32"), weight=Tensor([64, 128, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 136],"float32"), )
paddle.vision.ops.roi_align(x=Tensor([8, 256, 336, 336],"float32"), boxes=Tensor([2245, 4],"float32"), boxes_num=Tensor([8],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([8, 256, 328, 336],"float32"), boxes=Tensor([2908, 4],"float32"), boxes_num=Tensor([8],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([8, 256, 320, 336],"float32"), boxes=Tensor([2857, 4],"float32"), boxes_num=Tensor([8],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(x=Tensor([1, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list[2,4,], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.where(Tensor([4, 280, 376, 25, 3],"bool"), Tensor([4, 280, 376, 25, 3],"float32"), Tensor([4, 280, 376, 25, 3],"float32"), )
paddle.where(Tensor([1, 400, 65856],"bool"), Tensor([1, 400, 65856],"float32"), Tensor([1, 400, 65856],"float32"), )
paddle.where(Tensor([4, 64, 320, 320],"bool"), Tensor([4, 64, 320, 320],"float32"), Tensor([4, 64, 320, 320],"float32"), )
paddle.zeros(list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], )
paddle.zeros(Tensor([2],"int32"), dtype=Dtype(float32), )
paddle.zeros(Tensor([2],"int32"), dtype=Dtype(int64), )
paddle.zeros_like(Tensor([4, 64, 320, 320],"float16"), )
paddle.zeros_like(Tensor([4, 64, 320, 320],"float32"), )
paddle.zeros_like(Tensor([4, 525, 12096],"float32"), )
paddle.nn.functional.gather_tree(Tensor([21, 8, 4],"int64"), Tensor([21, 8, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 4, 8],"int64"), Tensor([11, 4, 8],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 4, 4],"int64"), Tensor([11, 4, 4],"int64"), )
paddle.rank(input=Tensor([3, 2, 2, 2],"float64"), )
paddle.rank(Tensor([3, 5],"float32"), )
paddle.rank(input=Tensor([2, 2],"float64"), )
paddle.Tensor.greater_equal(Tensor([21],"int64"), Tensor([],"int64"), )
paddle.Tensor.greater_equal(Tensor([19],"int64"), Tensor([],"int64"), )
paddle.Tensor.slice(Tensor([4, 4],"float32"), list[1,], list[0,], list[1,], )
paddle.Tensor.take_along_axis(Tensor([128, 1000],"float32"), indices=Tensor([128, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 1000],"float32"), indices=Tensor([80, 1],"int32"), axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 4],"float32"), x=None, dx=Tensor([],"int64"), axis=1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=0, )
paddle.Tensor.rank(Tensor([256, 2048, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([256, 1536, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([256, 768, 3, 3],"float32"), )
paddle.unique(Tensor([120],"int64"), return_index=True, return_inverse=True, return_counts=True, dtype="int32", )
paddle.unique(Tensor([120],"int64"), )
paddle.unique(Tensor([89],"int64"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 7, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 1, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 11, 32, 32],"float32"), )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float16"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float32"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
paddle.reshape(x=Tensor([100352, 8192],"bfloat16"), shape=list[822083584,], )
paddle.reshape(x=Tensor([8192, 100352],"bfloat16"), shape=list[822083584,], )
paddle.reshape(Tensor([111616, 7168],"bfloat16"), list[-1,7168,], )
paddle.nn.functional.avg_pool1d(Tensor([16, 2, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 1, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([13, 1, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([91, 32, 7],"float32"), 7, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.Tensor.__getitem__(Tensor([8168, 8, 1280],"bfloat16"), slice(None,-6,None), )
paddle.Tensor.__getitem__(Tensor([7712, 8, 1280],"bfloat16"), slice(None,-2,None), )
paddle.Tensor.__getitem__(Tensor([7576, 8, 1280],"bfloat16"), slice(None,-3,None), )
paddle.Tensor.__setitem__(Tensor([1, 8192, 7168],"float32"), Tensor([1, 8192],"bool"), Tensor([8162, 7168],"bfloat16"), )
paddle.Tensor.__setitem__(Tensor([1, 8192, 7168],"float32"), Tensor([1, 8192],"bool"), Tensor([7780, 7168],"bfloat16"), )
paddle.Tensor.__setitem__(Tensor([1, 8192, 7168],"float32"), Tensor([1, 8192],"bool"), Tensor([7710, 7168],"bfloat16"), )
paddle.Tensor.put_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 8],"int64"), Tensor([],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 7],"int64"), Tensor([],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 6],"int64"), Tensor([],"float32"), axis=1, )
paddle.empty(list[1,896,], dtype=Dtype(bfloat16), )
paddle.empty(list[1,896,], dtype=Dtype(float32), )
paddle.empty(list[1,], dtype="int64", )
paddle.empty_like(Tensor([4096, 64],"bool"), )
paddle.empty_like(Tensor([4096, 64],"float32"), )
paddle.empty_like(Tensor([172],"uint8"), )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([8168, 1280],"bfloat16"), Tensor([8168, 1280],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([7712, 1280],"bfloat16"), Tensor([7712, 1280],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([7576, 1280],"bfloat16"), Tensor([7576, 1280],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 8192],"bfloat16"), Tensor([8192, 100352],"bfloat16"), None, transpose_weight=False, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 16384],"bfloat16"), Tensor([16384, 8192],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 8192, 7168],"bfloat16"), Tensor([7168, 12800],"bfloat16"), Tensor([12800],"bfloat16"), )
paddle.nn.functional.dropout(Tensor([8168, 1280],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([7712, 1280],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([7576, 1280],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 4096, 64, 128],"bfloat16"), None, None, rotary_emb_base=10000, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 4096, 8, 128],"bfloat16"), None, None, rotary_emb_base=10000, )
